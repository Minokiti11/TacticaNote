<script src="https://vjs.zencdn.net/7.20.2/video.min.js"></script>
<link href="https://vjs.zencdn.net/7.20.2/video-js.css" rel="stylesheet" />

<div class="container mt-5">
  <% if @video.video.attached? %>
    <video class="video-js vjs-big-play-centered" preload="metadata" controls playsinline id="video">
      <source src="<%= rails_blob_path(@video.video) %>" type="video/mp4">
    </video>
    <h3 style="margin-top: 15px;"><%= @video.title %></h3>
    <%= @video.introduction %><br>
    <%= link_to 'ノートを書く', new_note_path(with_video: true, video_id: @video_id), "data-turbo": false, class: "btn btn-success", style: "margin-top: 6px; margin-botom: 6px;" %>
    <% if current_user %>
      <% if @video.user_id == current_user.id %>
        <%= button_to 'このビデオを削除', video_path(@video), "data-turbo": false, method: :delete, class: "btn btn-danger", style: "margin-top: 6px; margin-bottom: 30px;", onclick: "return confirm('本当に削除しますか？');"%>
      <% end %>
    <% end %>
    
    <div class="row mt-4">
      <% @video.notes.each do |note| %>
        <div class="col-md-6 col-lg-4 mb-4">
          <%= link_to note_path(note), "data-turbo": false, class: "card h-100", style: "text-decoration: none; color: black;" do %>
            <div class="card-body">
              <h5 class="card-title"><%= note.title %></h5>
              <p class="card-text"><small class="text-body-secondary"><%= note.user.username %></small></p>
              <p class="card-text mt-auto"><small class="text-body-secondary"><time><%= note.updated_at.strftime("%Y-%m-%d %H:%M") %></time>更新</small></p>
            </div>
          <% end %>
        </div>
      <% end %>
    </div>
  <% end %>
</div>

<script>
  const player = videojs('video', {
      autoplay: false, // 自動再生を無効
      fluid: true, // 動画コンテンツを親要素いっぱいに広げる
      loop: false, // 繰り返し再生無効
      controls: true, // コントローラ表示
      playbackRates: [0.5, 1, 1.3, 1.5], // 再生速度の倍率
      controlBar: {
        pictureInPictureToggle: false, // ピクチャーインピクチャーを無効にする
        fullscreenToggle: true // 全画面ボタンを有効にする
      }
  });
  var video_el = document.getElementById("video");

  // videojsのreadyイベントを使用して、メタデータがロードされたときの処理を設定
  player.ready(function() {
    var self = this;
    self.on('loadedmetadata', () => {
      console.log('loaded meta data.');
      // コントローラに10秒戻しボタンと10秒送りボタンを追加
      const rewindButton = player.getChild('ControlBar').addChild('button');
      const forwardButton = player.getChild('ControlBar').addChild('button');
      rewindButton.controlText('10秒戻し');
      forwardButton.controlText('10秒送り');

      // アイコンを設定
      const controlBar = player.getChild('ControlBar');
      const pipToggle = controlBar.getChild('pictureInPictureToggle');
      const fullscreenToggle = controlBar.getChild('fullscreenToggle');

      // 挿入位置を決定（PiPボタンが存在しない場合は全画面ボタンの前に挿入）
      const insertBeforeElement = pipToggle || fullscreenToggle;

      if (insertBeforeElement) {
        controlBar.el().insertBefore(
          rewindButton.el(),
          insertBeforeElement.el()
        ).innerHTML = `<img src="<%= asset_path 'rewind.png' %>" width="20" />`;
        
        controlBar.el().insertBefore(
          forwardButton.el(),
          insertBeforeElement.el()
        ).innerHTML = `<img src="<%= asset_path 'forward.png' %>" width="20" />`;
      } else {
        // デフォルトの挿入位置（最後）に追加
        controlBar.el().appendChild(rewindButton.el()).innerHTML = `<img src="<%= asset_path 'rewind.png' %>" width="20" />`;
        controlBar.el().appendChild(forwardButton.el()).innerHTML = `<img src="<%= asset_path 'forward.png' %>" width="20" />`;
      }

      // スキップ処理を追加
      rewindButton.el().addEventListener('click', () => {
        var newTime = self.currentTime() - 10;
        if (newTime < 0) newTime = 0; //現在時刻が0未満にならないように調整
        self.currentTime(newTime);
      });
      
      forwardButton.el().addEventListener('click', () => {
        var newTime = self.currentTime() + 10;
        var maxTime = self.duration(); // ビデオの長さを取得
        if (newTime > maxTime) newTime = maxTime; //現在時刻がビデオの長さ以上にならないように調整
        self.currentTime(newTime);
      });

      document.addEventListener('keydown', function (e) {
        if (e.code == 'ArrowLeft') {
          var newTime = self.currentTime() - 10;
          if (newTime < 0) newTime = 0; //現在時刻が0未満にならないように調整
          self.currentTime(newTime);
        } else if (e.code == 'ArrowRight') {
          var newTime = self.currentTime() + 10;
          var maxTime = self.duration(); // ビデオの長さを取得
          if (newTime > maxTime) newTime = maxTime; //現在時刻がビデオの長さ以上にならないように調整
          self.currentTime(newTime);
        }
      })
    });
  });
</script>
