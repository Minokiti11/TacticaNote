<script src="https://vjs.zencdn.net/7.20.2/video.min.js"></script>
<link href="https://vjs.zencdn.net/7.20.2/video-js.css" rel="stylesheet" />

<link rel="stylesheet" type="text/css" href="/dist/videojs-zoom.css">
<script src="/dist/videojs-zoom.js"></script>

<style>
  @media (max-width: 1100px) {
    .vjs-remaining-time {
      display: none;
    }

    .for-pc {
      display: none;
    }
  }
  .timestamp-list {
    display: flex;
    overflow-x: auto; /* 横スクロールを有効にする */
    white-space: nowrap;
    flex-direction: column;
    list-style: none;
    padding: 0;
    position: relative; /* タイムラインの線を配置するため */
    /* margin-left: 20px; */
  }

  .timestamp-list::before {
    content: '';
    position: absolute;
    left: 10px;
    top: 0;
    bottom: 0;
    width: 2px;
    background: #ccc; /* 線の色 */
  }

  .timestamp-list li {
    /* flex: 1 1 20%; */
    box-sizing: border-box; /* パディングとボーダーを含めた幅を計算 */
    position: relative;
    margin-bottom: 10px;
    /* padding-left: 20px; */
  }

  .timestamp-list li::before {
    content: '';
    position: absolute;
    left: -10px;
    top: 5px;
    width: 10px;
    height: 10px;
    /* background: #fff;
    border: 2px solid #343a40;
    border-radius: 50%; */
  }

  .timestamp-link {
    text-decoration: none;
    color: #343a40;
    display: flex;
    flex-direction: column; /* 縦方向に配置 */
    align-items: flex-start; /* 左揃え */
    width: 100%; /* 幅を均等にする */
  }

  .timestamp-card {
    margin-right: 10px;
  }

  .timestamp-time {
    font-weight: bold;
    margin-top: 5px; /* 説明と時間の間にスペースを追加 */
  }

  .timestamp-description {
    flex-grow: 1;
  }

  @media (min-width: 1101px) {
    .container-wrapper {
      display: flex; /* 横並びにする */
    }

    #container {
      flex: 1; /* containerを左に表示 */
    }

    .timestamp-list {
      width: 400px; /* timestamp-listの幅を設定 */
    }

    .for-mobile {
      display: none;
    }
  }

  video {
    -webkit-playsinline: true;
  }
</style>
<div class="container-wrapper">
  <div id="container" class="px-3 mt-5">
    <% if @video.video.attached? %>
      <video class="video-js vjs-big-play-centered" preload="metadata" controls playsinline id="video" data-video-id="<%= @video_id%>">
        <source src="<%= rails_blob_path(@video.video) %>" type="video/mp4">
      </video>
      <h3 style="margin-top: 15px;">
        <%= @video.title %>
      </h3>
      <div id="distance"></div>
      <div id="ratio"></div>
      <hr style="border-top: 1px solid grey; width: 100%; margin-top: 20px; margin-bottom: 20px;">
      <!-- タイムスタンプリスト -->
      <div id="timestamp-list" class="for-mobile" style="margin-top: 10px;">
        <div class="d-flex justify-content-between align-items-center" style="margin-right: 10px;">
          <h5 style="margin-bottom: 20px;">タイムライン</h5>
          <button class="modal-open btn btn-dark d-block rounded-circle bg-black" style="margin-bottom: 20px;">
            <i class="fas fa-plus"></i>
          </button>
        </div>

        <ul class="timestamp-list" style="max-height: 450px; overflow-y">
          <% @video.timestamps.order(time_s: :asc).each do |timestamp| %>
            <li>
              <div class="card timestamp-card">
                <div class="card-body">
                  <div class="d-flex align-items-center">
                    <a href="#" class="timestamp-link" data-turbo="false" onclick="jumpTo(<%= timestamp.time_s %>)">
                      <span class="timestamp-description"><%= timestamp.description %></span>
                      <span class="timestamp-time"><%= "#{(timestamp.time_s / 60).to_i}:#{(timestamp.time_s % 60).to_i}" %></span>
                    </a>
                    <%= button_to timestamp_path(timestamp), "data-turbo": false, method: :delete, class: "btn btn-link p-0 ml-2" do %>
                      <i class="fas fa-trash-alt" style="color: black; font-size: 1.0em;"></i>
                    <% end %>
                    <div class="btn update-modal-open" data-timestamp-id = '<%= timestamp.id %>' data-timestamp-name = '<%= timestamp.description %>' data-timestamp-minutes = '<%= (timestamp.time_s / 60).to_i %>' data-timestamp-seconds = '<%= (timestamp.time_s % 60).to_i %>'>
                      <i class="fas fa-edit" style="color: black; font-size: 1.0em;"></i>
                    </div>
                  </div>
                </div>
              </div>
            </li>
          <% end %>
        </ul>
        <hr style="border-top: 1px solid grey; width: 100%; margin-top: 20px; margin-bottom: 20px;">
      </div>

      
      <%= @video.introduction %><br>
      <%= link_to 'ノートを書く', new_note_path(with_video: true, video_id: @video_id, note_for: "match"), "data-turbo": false, class: "btn btn-success", style: "margin-top: 6px; margin-botom: 6px;" %>
      <% if current_user %>
        <% if @video.user_id == current_user.id %>
          <%= button_to 'このビデオを削除', video_path(@video), "data-turbo": false, method: :delete, class: "btn btn-danger", style: "margin-top: 6px; margin-bottom: 30px;", onclick: "return confirm('本当に削除しますか？');"%>
        <% end %>
      <% end %>
      
      <div class="row mt-4">
        <% @video.notes.each do |note| %>
          <div class="col-md-6 col-lg-4 mb-4">
            <%= link_to note_path(note), "data-turbo": false, class: "card h-100", style: "text-decoration: none; color: black;" do %>
              <div class="card-body">
                <h5 class="card-title"><%= note.title %></h5>
                <p class="card-text"><small class="text-body-secondary"><%= note.user.username %></small></p>
                <p class="card-text mt-auto"><small class="text-body-secondary"><time><%= note.updated_at.strftime("%Y-%m-%d %H:%M") %></time>更新</small></p>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    <% end %>
  </div>

  <% if !request.env['HTTP_USER_AGENT'].include?('Mobile') %>
    <!-- タイムスタンプリスト -->
    <div id="timestamp-list" class="for-pc mt-5" style="margin-top: 10px;">
      <div class="d-flex justify-content-between align-items-center" style="margin-right: 10px;">
        <h5 style="margin-bottom: 20px;">タイムライン</h5>
        <button class="modal-open btn btn-dark d-block rounded-circle bg-black" style="margin-bottom: 20px;">
          <i class="fas fa-plus"></i>
        </button>
      </div>

      <ul class="timestamp-list">
        <% @video.timestamps.order(time_s: :asc).each do |timestamp| %>
          <li>
            <div class="card timestamp-card">
              <div class="card-body">
                <div class="d-flex align-items-center">
                  <a href="#" class="timestamp-link" data-turbo="false" onclick="jumpTo(<%= timestamp.time_s %>)">
                    <span class="timestamp-description"><%= timestamp.description %></span>
                    <span class="timestamp-time"><%= "#{(timestamp.time_s / 60).to_i}:#{(timestamp.time_s % 60).to_i}" %></span>
                  </a>
                  <%= button_to timestamp_path(timestamp), "data-turbo": false, method: :delete, class: "btn btn-link p-0 ml-2", onclick: "console.log('passed.');" do %>
                    <i class="fas fa-trash-alt" style="color: black; font-size: 1.0em;"></i>
                  <% end %>
                  <div class="btn update-modal-open" data-timestamp-id = '<%= timestamp.id %>' data-timestamp-name = '<%= timestamp.description %>' data-timestamp-minutes = '<%= (timestamp.time_s / 60).to_i %>' data-timestamp-seconds = '<%= (timestamp.time_s % 60).to_i %>'>
                    <i class="fas fa-edit" style="color: black; font-size: 1.0em;"></i>
                  </div>
                </div>
              </div>
            </div>
          </li>
        <% end %>
      </ul>
      <%# <hr style="border-top: 1px solid grey; width: 100%; margin-top: 20px; margin-bottom: 20px;"> %>
    </div>
  <% end %>
</div>


<% if @video_id %>
  <!-- モーダル本体 -->
  <div class="modal-container">
    <div class="modal-body">
      <!-- 閉じるボタン -->
      <div class="modal-close" style="color: white;">×</div>
      <!-- モーダル内のコンテンツ -->
      <div class="modal-content">
        <p><span style="font-weight: bold; color: white;">タイムスタンプの名前</span><br>
          <input type="text" name="timestamp_name" id="timestamp_name" style="margin-top: 10px;">
        </p>
        <p><span style="font-weight: bold; color: white;">時間 (分:秒)</span><br>
          <div style="margin-top: 10px;">
            <input type="number" name="timestamp_minutes" id="timestamp_minutes" placeholder="分" min="0" style="width: 60px; margin-right: 5px;"><span style="color: white;">:</span>
            <input type="number" name="timestamp_seconds" id="timestamp_seconds" placeholder="秒" min="0" max="59" style="width: 60px;">
          </div>
        </p>
        <%= link_to '作成', '#', "data-turbo": false, id: "create-timestamp-btn", class: "btn btn btn-outline-light", style: "margin-top: 10px; border-width: 2px; border-radius: 0;", onclick: "addTimestamp(#{@video.id})" %>
      </div>
    </div>
  </div>
<% end %>

<script>
  const player = videojs('video', {
      autoplay: false, // 自動再生を無効
      fluid: true, // 動画コンテンツを親要素いっぱいに広げる
      loop: false, // 繰り返し再生無効
      controls: true, // コントローラ表示
      playbackRates: [0.5, 1, 1.3, 1.5], // 再生速度の倍率
      controlBar: {
        pictureInPictureToggle: false, // ピクチャーインピクチャーを無効にする
        fullscreenToggle: true, // 全画面ボタンを有効にする
        volumePanel: false // 音声バーを無効にする
      },
      fullscreen: {
        enterOnRotate: true,
        exitOnRotate: true,
        alwaysInFullScreen: true
      }
  });

  const zoomPlugin = player.zoomPlugin();

  let initialDistance = 0;

  let ongoingTouches = [];

  function handleTouchStart(evt) {
    evt.preventDefault();
    const touches = evt.changedTouches;

    for (let i = 0; i < touches.length; i++) {
      ongoingTouches.push(copyTouch(touches[i]));
    }

    if (ongoingTouches.length === 2) {
      initialDistance = getDistance(ongoingTouches[0], ongoingTouches[1]);
      console.log("2本の指でタッチ開始");
    }
  }

  let ratio = 1;
  let previousDistance = 0;

  function handleTouchMove(evt) {
    evt.preventDefault();
    const touches = evt.changedTouches;

    for (let i = 0; i < touches.length; i++) {
      const idx = ongoingTouchIndexById(touches[i].identifier);
      if (idx >= 0) {
        ongoingTouches.splice(idx, 1, copyTouch(touches[i]));
      }
    }

    if (ongoingTouches.length === 2) {
      const currentDistance = getDistance(ongoingTouches[0], ongoingTouches[1]);
      $('#distance').text(`CurrentDistance: ${currentDistance}
                              InitialDistance: ${initialDistance}`);
      if (currentDistance > initialDistance) {
        console.log(`Pinch Out (拡大), ratio: ${currentDistance / initialDistance}`);
        if (typeof ratio !== 'undefined' && ratio !== null) {
          if (currentDistance < previousDistance) {
            ratio -= (currentDistance - initialDistance) / initialDistance * 0.1;
          } else {
            ratio += (currentDistance - initialDistance) / initialDistance * 0.1;
          }
          
          $('#ratio').text(`増加中の比率: ${ratio.toFixed(2)}`);
        }
        
        if (ratio > 1) {
          zoomPlugin.zoom(ratio);
        }
      } else if (currentDistance < initialDistance) {
        console.log(`Pinch In (縮小), ratio: ${currentDistance / initialDistance}`);

        if (typeof ratio !== 'undefined' && ratio !== null) {
          ratio -= (initialDistance - currentDistance) / initialDistance * 0.2;
          ratio = Math.max(ratio, 1);
          $('#ratio').text(`比率: ${ratio.toFixed(2)}`);
        }
        if (ratio > 1) {
          zoomPlugin.zoom(ratio);
        }
      }
      previousDistance = currentDistance;
    }
  }


  function handleTouchEnd(evt) {
    evt.preventDefault();
    const touches = evt.changedTouches;

    for (let i = 0; i < touches.length; i++) {
      const idx = ongoingTouchIndexById(touches[i].identifier);
      if (idx >= 0) {
        ongoingTouches.splice(idx, 1);
      }
    }
  }

  function handleTouchCancel(evt) {
    evt.preventDefault();
    ongoingTouches = [];
  }

  function copyTouch(touch) {
    return { identifier: touch.identifier, pageX: touch.pageX, pageY: touch.pageY };
  }

  function ongoingTouchIndexById(idToFind) {
    for (let i = 0; i < ongoingTouches.length; i++) {
      const id = ongoingTouches[i].identifier;

      if (id === idToFind) {
        return i;
      }
    }
    return -1;
  }

  function getDistance(touch1, touch2) {
    const dx = touch2.pageX - touch1.pageX;
    const dy = touch2.pageY - touch1.pageY;
    return Math.sqrt(dx * dx + dy * dy);
  }

  document.addEventListener('touchstart', handleTouchStart, { passive: false });
  document.addEventListener('touchmove', handleTouchMove, { passive: false });
  document.addEventListener('touchend', handleTouchEnd, { passive: false });
  document.addEventListener('touchcancel', handleTouchCancel, { passive: false });

  var video_el = document.getElementById("video");

  player.on('error', function() {
    const error = player.error();
    alert('セッションが切断されました。リロードします・・');
    location.reload();
  });

  // fullScreenElement = document.getElementsByClassName("vjs-fullscreen-control")[0];
	// if (videojs.browser.IS_IOS ) {
	// 	fullScreenElement.parentNode.removeChild(fullScreenElement);
	// }

  // videojsのreadyイベントを使用して、メタデータがロードされたときの処理を設定
  player.ready(function() {
    var self = this;
    self.on('loadedmetadata', () => {
      console.log('loaded meta data.');
      // コントローラに10秒戻しボタンと10秒送りボタンを追加
      const rewindButton = player.getChild('ControlBar').addChild('button');
      const forwardButton = player.getChild('ControlBar').addChild('button');
      rewindButton.controlText('10秒戻し');
      forwardButton.controlText('10秒り');

      rewindButton.el().style.marginRight = '-6px';
      forwardButton.el().style.marginLeft = '-6px';

      // アイコンを設定
      const controlBar = player.getChild('ControlBar');
      const fullscreenToggle = controlBar.getChild('fullscreenToggle');

      // 挿入位置を決定（PiPボタンが存在しない場合は全画面ボタンの前に挿入）
      const insertBeforeElement = fullscreenToggle;

      if (insertBeforeElement) {
        controlBar.el().insertBefore(
          rewindButton.el(),
          insertBeforeElement.el()
        ).innerHTML = `<img src="<%= asset_path 'rewind.png' %>" width="20" />`;
        
        controlBar.el().insertBefore(
          forwardButton.el(),
          insertBeforeElement.el()
        ).innerHTML = `<img src="<%= asset_path 'forward.png' %>" width="20" />`;
      } else {
        // デフォルトの挿入位置（最後）に追加
        controlBar.el().appendChild(rewindButton.el()).innerHTML = `<img src="<%= asset_path 'rewind.png' %>" width="20" />`;
        controlBar.el().appendChild(forwardButton.el()).innerHTML = `<img src="<%= asset_path 'forward.png' %>" width="20" />`;
      }

      // スキップ処理を追加
      rewindButton.el().addEventListener('click', () => {
        var newTime = self.currentTime() - 10;
        if (newTime < 0) newTime = 0; // 現在時刻が0未満にならないように調整
        self.currentTime(newTime);
      });
      
      forwardButton.el().addEventListener('click', () => {
        var newTime = self.currentTime() + 10;
        var maxTime = self.duration(); // ビデオの長さを取得
        if (newTime > maxTime) newTime = maxTime; // 現在時刻がビデオの長さ以上にならないように調整
        self.currentTime(newTime);
      });

      document.addEventListener('keydown', function (e) {
        if (e.code == 'ArrowLeft') {
          var newTime = self.currentTime() - 10;
          if (newTime < 0) newTime = 0; // 現在時刻が0未満にならないように調
          self.currentTime(newTime);
        } else if (e.code == 'ArrowRight') {
          var newTime = self.currentTime() + 10;
          var maxTime = self.duration(); // ビデオの長さを取得
          if (newTime > maxTime) newTime = maxTime; // 現在時刻がビデオの長さ以上にならないように調整
          self.currentTime(newTime);
        }
      });
    });
  });

  player.on('fullscreenchange', function() {
    if (player.isFullscreen()) {
      // フルスクリーンモードに入ったときの処理
      console.log('フルスクリーンモードに入りました');
      
      // プレイヤーのサイズを画面いっぱいに設定
      player.width(window.innerWidth);
      player.height(window.innerHeight);
      
      // コントロールバーを常に表示
      player.controls(true);
      
      // 自動再生を開始（オプション）
      player.play();
      
      // カスタムクラスを追加してスタイルを変更
      player.el().classList.add('my-fullscreen-class');
    } else {
      // フルスクリーンモードを終了したときの処理
      console.log('フルスクリーンモードを終了しました');
      
      // プレイヤーのサイズを元に戻す
      player.width('100%');
      player.height('auto');
      
      // コントロールバーの表示を元の設定に戻す
      player.controls(player.options_.controls);
      
      // カスタムクラスを削除
      player.el().classList.remove('my-fullscreen-class');
    }
  });

  function jumpTo(time) {
    player.currentTime(time);
  }

  $(function(){
    // 変数に要素を入れる
    var open = $('.modal-open'),
      update_open = $('.update-modal-open'),
      close = $('.modal-close'),
      container = $('.modal-container');

    //開くボタンをクリックしたらモーダルを表示する
    open.on('click', function() {	
      container.addClass('active');
      return false;
    });

    update_open.on('click', function() {
        container.addClass('active');
        // タイムスタンプの値を設定
        $('#timestamp_name').val($(this).data('timestamp-name'));
        $('#timestamp_minutes').val(parseInt($(this).data('timestamp-minutes')));
        $('#timestamp_seconds').val(parseInt($(this).data('timestamp-seconds')));

        $('#create-timestamp-btn').text('更新');
        $('#create-timestamp-btn').attr('onclick', `updateTimestamp(${parseInt($(this).data('timestamp-id'))}, ${parseInt(video_el.getAttribute('data-video-id'))}, "/notes/new?note_for=match&video_id=${parseInt(video_el.getAttribute('data-video-id'))}&with_video=true")`);
        return false;
    });

    //閉じるボタンをクリックしたらモーダルを閉じる
    close.on('click',function(){	
      container.removeClass('active');
    });

    //モーダルの外側をクリックしたらモーダルを閉じる
    $(document).on('click',function(e) {
      if(!$(e.target).closest('.modal-body').length) {
        container.removeClass('active');
      }
    });
  });

  //タイムスタンプを追加するボタン
  function addTimestamp(video_id) {
    const name = document.getElementById('timestamp_name').value;
    const currentTime = player.currentTime();
    const minutes = parseInt(document.getElementById('timestamp_minutes').value) || Math.int(currentTime / 60);
    const seconds = parseInt(document.getElementById('timestamp_seconds').value) || Math.int(currentTime % 60);
    const totalSeconds = minutes * 60 + seconds;
    console.log(video_id);

    fetch('/timestamps', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        timestamp: { 
          description: name,
          time_s: totalSeconds,
          video_id: video_id
        }
      })
    })
    .then(response => {
      if (response.ok) {
        location.reload();
      }
    })
    .catch(error => {
      console.error('エラーが発生しました:', error);
    });
  }

  // タイムスタンプの更新用のモーダルを開くボタン
  function open_update_timestamp_modal(timestamp_name, timestamp_minutes, timestamp_seconds) {
      var container = $('.modal-container');
      container.addClass('active');
      console.log(container.attr('class'));


      return false;
  };

  //タイムスタンプを更新するボタン
  function updateTimestamp(timestamp_id, video_id, redirect_path) {
      const name = document.getElementById('timestamp_name').value;
      const minutes = parseInt(document.getElementById('timestamp_minutes').value) || 0;
      const seconds = parseInt(document.getElementById('timestamp_seconds').value) || 0;
      const totalSeconds = minutes * 60 + seconds;
      console.log(video_id);

      fetch(`/timestamps/${timestamp_id}/update`, {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({
              timestamp: { 
              description: name,
              time_s: totalSeconds,
              video_id: video_id,
              redirect_path: redirect_path
              }
          })
      })
      .then(response => {
          if (response.ok) {
              location.reload();
          }
      })
      .catch(error => {
          console.error('エラーが発生しました:', error);
      });
  }
</script>
