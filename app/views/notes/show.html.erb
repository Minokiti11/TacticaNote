<script src="https://vjs.zencdn.net/7.20.2/video.min.js"></script>
<link href="https://vjs.zencdn.net/7.20.2/video-js.css" rel="stylesheet" />
<style>
    #video {
        width: 499px;
        height: 281px;
    }
    @media screen and (max-width: 767px) {
        /* ここに横幅が767pxより小さい時に発動するスタイルを記述 */
        #video {
            width: 100%;
            height: 100%;
            margin:0 auto;
            padding-top:56.25%;/*比率調整※16:9の画面幅*/
        }
    }

    /* リッチテキスト内の画像を自動リサイズ */
    .note-content img {
        max-width: 100%;
        height: auto;
    }
</style>

<!-- モバイル端末の場合 -->
<%= link_to '← ノートの一覧へ', group_note_path(session[:current_group_id]), class: "me-2", "data-turbo": false, style: "font-size: 1em; display: block; margin-top: 30px; margin-left: 10px;" if request.env['HTTP_USER_AGENT'].include?('Mobile') %>
<div class="container mt-5">
  <!-- 非モバイル端末の場合 -->
  <%= link_to '← ノートの一覧へ', group_note_path(session[:current_group_id]), class: "me-2", "data-turbo": false, style: "font-size: 1.2em; display: block; margin-bottom: 30px;" unless request.env['HTTP_USER_AGENT'].include?('Mobile') %>
  <% if @note.video_id %>
    <% video = Video.find_by(id: @note.video_id) %>
  <% end %>
  <% if video.present? %>
    <% @with_video = true %>
    <video class="video-js vjs-big-play-centered" preload="metadata" controls playsinline id="video">
      <source src="<%= rails_blob_path(video.video) %>" type="video/mp4">
    </video>
  <% else %>
    <% @with_video = false %>
  <% end %>
  <div class="d-flex justify-content-between align-items-center" style="margin-top: 40px; margin-bottom: 50px;">
    <div class="h2 font-weight-700">
      <%= @note.title %>
    </div>
    <% if @note.user_id == current_user.id %>
      <% if @with_video %>
        <%= link_to edit_note_path(@note, group_id: @note.group_id, with_video: @with_video, video_id: @note.video_id, note_for: @note.note_for), class: "btn", "data-turbo": false do %>
          <i class="fas fa-edit" style="color: black; font-size: 1.5em;"></i>
        <% end %>
      <% else %>
        <%= link_to edit_note_path(@note, group_id: @note.group_id, with_video: @with_video, note_for: @note.note_for), class: "btn", "data-turbo": false do %>
          <i class="fas fa-edit" style="color: black; font-size: 1.5em;"></i>
        <% end %>
      <% end %>
    <% end %>
  </div>
  <div class="card mb-3">
    <div class="card-header">上手くいった点</div>
    <div class="card-body note-content"><%= safe_join([@note.good.html_safe]) %></div>
  </div>

  <div class="card mb-3">
    <div class="card-header">上手くいかなかった点</div>
    <div class="card-body note-content"><%= safe_join([@note.bad.html_safe]) %></div>
  </div>

  <div class="card mb-3">
    <div class="card-header">次に意識すること・次に向けて取り組むこと</div>
    <div class="card-body note-content"><%= safe_join([@note.next.html_safe]) %></div>
  </div>

  <div class="card mb-3">
    <div class="card-header">チームで話し合いたいこと・確認したいこと</div>
    <div class="card-body note-content"><%= safe_join([@note.discuss.html_safe]) %></div>
  </div>

  <% if @note.user_id == current_user.id %>
    <%= button_to 'このノートを削除', note_path(@note), method: :delete, class: "btn btn-danger", style: "margin-top: 6px; margin-bottom", onclick: "return confirm('本当に削除しますか？');"%>
  <% end %>
</div>

<% if @with_video %>
  <script>
    const player = videojs('video', {
        autoplay: false, // 自動再生を無効
        fluid: false, // 動画コンテンツを親要素いっぱいに広げる
        loop: false, // 繰り返し再生無効
        controls: true, // コントローラ表示
        playbackRates: [0.5, 1, 1.3, 1.5], // 再生速度の倍率
    });
    var video_el = document.getElementById("video");

    $(".note-content").each(function(){
      // テキストエリアの内容を取得
      let content = $(this).html();
      // 時間形式（00:00）にマッチする正規表現
      const regex = /\b(\d{1,2}):(\d{1,2})\b/g;
      
      // マッチした時間形式をリンクに置換
      content = content.replace(regex, function(match) {
        const [minutes, seconds] = match.split(':').map(Number);
        const totalSeconds = minutes * 60 + seconds;
        return `<a href="#" class="time-link" data-time="${totalSeconds}">${match}</a>`;
      });

      // 変更した内容を要素に反映
      $(this).html(content);
    });

    // リンクのクリックイベントを設定
    $(document).on('click', '.time-link', function(event) {
      event.preventDefault();
      const time = $(this).data('time');
      player.currentTime(time);
      player.play();
    });

    // videojsのreadyイベントを使用して、メタデータがロードされたときの処理を設定
    player.ready(function() {
      this.on('loadedmetadata', function() {
        // コントローラに10秒戻しボタンと10秒送りボタンを追加
        const rewindButton = player.getChild('ControlBar').addChild('button');
        const forwardButton = player.getChild('ControlBar').addChild('button');
        rewindButton.controlText('10秒戻し');
        forwardButton.controlText('10秒送り');

        // アイコンを設定
        player.getChild('ControlBar')
            .el()
            .insertBefore(
                rewindButton.el(),
                player.getChild('ControlBar').getChild('pictureInPictureToggle').el()
            )
            .innerHTML = `<img src=<%= asset_path 'rewind.png' %> width=20 />`;

        player.getChild('ControlBar')
            .el()
            .insertBefore(
                forwardButton.el(),
                player.getChild('ControlBar').getChild('pictureInPictureToggle').el()
            )
            .innerHTML = `<img src=<%= asset_path 'forward.png' %> width=20 />`;

        // スキップ処理を追加
        rewindButton.el().addEventListener('click', () => {
            var newTime = this.currentTime() - 10;
            if (newTime < 0) newTime = 0; //現在時刻が0未満にならないように調整
            this.currentTime(newTime);
        });
        
        forwardButton.el().addEventListener('click', () => {
            var newTime = this.currentTime() + 10;
            var maxTime = this.duration(); // ビデオの長さを取得
            if (newTime > maxTime) newTime = maxTime; //現在時刻がビデオの長さ以上にならないように調整
            this.currentTime(newTime);
        });
      });
    });
  </script>
<% end %>