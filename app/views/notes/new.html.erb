<script src="https://vjs.zencdn.net/7.20.2/video.min.js"></script>
<link href="https://vjs.zencdn.net/7.20.2/video-js.css" rel="stylesheet" />
<script src="https://unpkg.com/turndown/dist/turndown.js"></script>
<style>
    @media (max-width: 1100px) {
        .vjs-remaining-time {
            display: none;
        }

        .for-pc {
            display: none;
        }
    }
    .timestamp-list {
        display: flex;
        overflow-x: auto; /* 横スクロールを有効にする */
        white-space: nowrap;
        flex-direction: column;
        list-style: none;
        padding: 0;
        position: relative; /* タイムラインの線を配置するため */
        /* margin-left: 20px; */
    }

    .timestamp-list::before {
        content: '';
        position: absolute;
        left: 10px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #ccc; /* 線の色 */
    }

    .timestamp-list li {
        /* flex: 1 1 20%; */
        box-sizing: border-box; /* パディングとボーダーを含めた幅を計算 */
        position: relative;
        margin-bottom: 10px;
        /* padding-left: 20px; */
    }

    .timestamp-list li::before {
        content: '';
        position: absolute;
        left: -10px;
        top: 5px;
        width: 10px;
        height: 10px;
        /* background: #fff;
        border: 2px solid #343a40;
        border-radius: 50%; */
    }

    .timestamp-link {
        text-decoration: none;
        color: #343a40;
        display: flex;
        flex-direction: column; /* 縦方向に配置 */
        align-items: flex-start; /* 左揃え */
        width: 100%; /* 幅を均等にする */
    }

    .timestamp-card {
        margin-right: 10px;
    }

    .timestamp-time {
        font-weight: bold;
        margin-top: 5px; /* 説明と時間の間にスペースを追加 */
    }

    .timestamp-description {
        flex-grow: 1;
    }

    @media (min-width: 1101px) {
        .container-wrapper {
            display: flex; /* 横並びにする */
        }

        #container {
            flex: 1; /* containerを左に表示 */
        }

        .timestamp-list {
            width: 400px; /* timestamp-listの幅を設定 */
        }

        .for-mobile {
            display: none;
        }
    }

    .form-control {
        height: 120px;
    }

    .progress-container {
        width: 100%;
        border-radius: 5px;
        margin-bottom: 20px;
        display: flex; /* 横並びにする */
    }
    .progress-step {
        flex: 1; /* 各ステップを均等に分ける */
        height: 7px;
        background-color: #007bff; /* 完了したステップの色 */
        transition: background-color 0.3s;
        border-radius: 5px;
        margin-right: 5px; /* 各ステップ間の間隔 */
    }
    .progress-step:last-child {
        margin-right: 0; /* 最後のステップの右マージンを削除 */
    }
    .progress-step.inactive {
        background-color: #e0e0e0; /* 未完了のステップの色 */
    }
    .progress-background {
        flex: 1; /* 各ステップの背景を均等に分ける */
        background-color: #f8f9fa; /* 背景色 */
        border-radius: 5px;
        margin-right: 5px; /* 各ステップ間の間隔 */
    }
    .progress-background:last-child {
        margin-right: 0; /* 最後の背景の右マージンを削除 */
    }

    .custom-button {
        margin-bottom: 15px;
        background-color: black; /* 背景色を黒に設定 */
        color: white; /* 文字色を白に設定 */
        border: none; /* ボーダーをなしに設定 */
        cursor: pointer; /* カーソルをポインターに設定 */
        transition: background-color 0.3s; /* 背景色の変化にアニメーションを追加 */
        font-size: 16px; /* フォントサイズを設定 */
        border-radius: 5px; /* 角を丸くする */
        width: 60%;
        height: 38px;
    }

    .custom-button:hover {
        background-color: #333; /* ホバー時の背景色を少し明るくする */
    }

    .custom-button:active,
    .custom-button:focus {
        background-color: black; /* 押したときの背景色を黒に保つ */
        color: white; /* 文字色を白に保つ */
        box-shadow: none; /* ボックスシャドウを無効にする */
    }
</style>
<%= form_with model: @note, local: true, html: {class: "needs-validation", novalidate: true, params: { group_id: params[:group_id] } } do |form| %>
    <% if @note.errors.any? %>
        <div id="error_explanation">
            <h2><%= pluralize(@note.errors.count, "error") %> prohibited this note from being saved:</h2>
            <ul>
                <% @note.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                <% end %>
            </ul>
        </div>
    <% end %>
    <div class="container-wrapper">
        <div id = "container" class="px-3 mt-3">
            <!-- プログレスバー -->
            <div class="progress-container">
                <div class="progress-background">
                    <div class="progress-step" id="progress-step-1"></div>
                </div>
                <div class="progress-background">
                    <div class="progress-step" id="progress-step-2"></div>
                </div>
                <div class="progress-background">
                    <div class="progress-step" id="progress-step-3"></div>
                </div>
                <div class="progress-background">
                    <div class="progress-step" id="progress-step-4"></div>
                </div>
            </div>
            <p class="text-center fw-bold" id="progress-text">0/4 ステップ完了</p>

            <% video = nil %>
            <% if @with_video == "true" && @video_id %>
                <% video = Video.find_by(id: @video_id) %>
                <% if video.video.attached? %>
                    <video class="video-js vjs-big-play-centered" preload="metadata" controls playsinline id="video" data-video-id="<%= @video_id %>">
                        <source src="<%= rails_blob_path(video.video) %>" type="video/mp4">
                    </video>
                <% else %>
                    <div class="alert alert-warning">
                        動画ファイルが見つかりませんでした。
                    </div>
                <% end %>

                <details>
                    <summary class="h5 mt-3 mb-2 d-flex align-items-center" onclick="toggleIcon(this)">
                        タイムスタンプ
                        <div class="btn btn-light ms-3" style="border: none; background: transparent; padding: 0;">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </summary>
                    <script>
                        function toggleIcon(summary) {
                            const icon = summary.querySelector('i');
                            icon.classList.toggle('fa-chevron-down');
                            icon.classList.toggle('fa-times'); // バツのアイコンに変更
                            const details = summary.parentElement;
                            const content = details.querySelector('#timestamp-list');
                            if (details.open) {
                                content.style.maxHeight = '0'; // 開くときの高さを0に
                            } else {
                                content.style.maxHeight = content.scrollHeight + 'px'; // 開くときの高さをコンテンツの高さに
                            }
                        }
                    </script>
                    <div id="timestamp-list" class="for-mobile" style="margin-top: 10px; overflow: hidden; transition: max-height 0.3s ease;">
                        <div class="d-flex justify-content-between align-items-center" style="margin-right: 10px;">
                        <%# <button class="modal-open btn btn-dark d-block rounded-circle bg-black" style="margin-bottom: 20px;">
                            <i class="fas fa-plus"></i>
                        </button> %>
                        </div>

                        <ul class="timestamp-list" style="max-height: 450px; overflow-y">
                        <% video.timestamps.order(time_s: :asc).each do |timestamp| %>
                            <li>
                            <div class="card timestamp-card">
                                <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <a href="#" class="timestamp-link" data-turbo="false" onclick="jumpTo(<%= timestamp.time_s %>)">
                                        <span class="timestamp-description"><%= timestamp.description %></span>
                                        <span class="timestamp-time"><%= "#{(timestamp.time_s / 60).to_i}:#{(timestamp.time_s % 60).to_i}" %></span>
                                    </a>
                                </div>
                                </div>
                            </div>
                            </li>
                        <% end %>
                        </ul>
                        <hr style="border-top: 1px solid grey; width: 100%; margin-top: 20px; margin-bottom: 20px;">
                    </div>
                </details>
            <% end %>

            <!-- 前回のノートを取得（試合なら試合、練習なら練習のノート） -->
            <% if params[:note_for] == "practice" %>
                <% latest_note = Note.where(user_id: current_user.id, group_id: params[:group_id], note_for: "practice").order(created_at: :desc).first %>
            <% else %>
                <% latest_note = Note.where(user_id: current_user.id, group_id: params[:group_id], note_for: "match").order(created_at: :desc)[1] %>
            <% end %>

            <style>
            .previous-note {
                background-color: #f8f9fa;
                border-radius: 8px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                padding: 20px;
                margin-top: 10px; 
                margin-bottom: 30px;
            }
            .previous-note-header {
                color: #343a40;
                font-size: 1.5rem;
                margin-bottom: 15px;
                border-bottom: 2px solid #007bff;
                padding-bottom: 10px;
            }
            .previous-note h4 {
                color: #495057;
                font-size: 1.2rem;
                margin-top: 20px;
                margin-bottom: 10px;
            }
            .previous-note p {
                color: #6c757d;
                line-height: 1.6;
            }
            .note-date {
                font-size: 0.9rem;
                color: #6c757d;
            }
            .note-section {
                margin-bottom: 20px;
            }
            /* リッチテキスト内の画像を自動リサイズ */
            .note-content img {
                max-width: 100%;
                height: auto;
            }

            .feedback-button {
                width: 60%;
                background-color:rgb(37, 37, 37);
                color: white;  
                margin-bottom: 20px;
            }
            .feedback-button:hover {
                background-color: #333; /* ホバー時の背景色を少し明るくする */
            }
            .feedback-button:active,
            .feedback-button:focus {
                background-color: black; /* 押したときの背景色を黒に保つ */
                color: white; /* 文字色を白に保つ */
                box-shadow: none; /* ボックスシャドウを無効にする */
            }

            .next-button {
                width: 60%;
                margin-bottom: 20px;
            }

            .back-button {
                width: 30%;
                margin-bottom: 20px;
            }
            </style>

            <!-- 前回のノート
            <div class="previous-note">
                <% if latest_note %>
                    <div class="previous-note-header d-flex justify-content-between align-items-center mb-3">
                        <h3 class="mb-0">前回のノート</h3>
                        <div class="note-date text-muted"><%= latest_note.created_at.strftime('%Y年%m月%d日') %></div>
                    </div>
                    <h5><%= latest_note.title %></h5>
                    
                    <div class="note-section">
                        <h4>Good</h4>
                        <div class="note-content"><%= safe_join([latest_note.good.html_safe]) %></div>
                    </div>
                    
                    <div class="note-section">
                        <h4>Bad</h4>
                        <div class="note-content"><%= safe_join([latest_note.bad.html_safe]) %></div>
                    </div>
                    
                    <div class="note-section">
                        <h4>Next</h4>
                        <div class="note-content"><%= safe_join([latest_note.next.html_safe]) %></div>
                    </div>
                    
                    <% if latest_note.discuss %>
                        <div class="note-section">
                            <h4>チームで確認したいこと:</h4>
                            <div class="note-content"><%= safe_join([latest_note.discuss.html_safe]) %></div>
                        </div>
                    <% end %>
                <% else %>
                    <p>前回のノートはありません。</p>
                <% end %>
            </div>
            -->

            <div id="step-1" class="step mt-4">
                <label class="form-label fw-bold mr-2">上手くいったこと</label>
                <div class="form-group card" id="good" style="border-bottom-left-radius: 0; border-bottom-right-radius: 0;" data-note-for="<%= @note_for %>" data-user-id="<%= current_user.id %>" data-token="<%= @unique_token %>" data-group-id="<%= params[:group_id]%>">
                    <div class="card-header p-0 d-flex justify-content-end">
                        <button type="button" class="btn btn-light bg-light" style="border-radius: 5px; font-size: 0.5rem; padding: 5px 10px;" onclick="insertBulletPoint('note_good');">
                            <i data-lucide="list" style="width: 20px; height: 20px;"></i>
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div contenteditable="true" class="form-control" style="border-radius: 0;" id="note_good"></div>
                    </div>
                    <%= form.hidden_field :good, id: 'hidden_note_good' %>
                </div>
                <div class="mt-4">
                    <div class="text-center">
                        <button type="button" class="custom-button" onclick="requestGood(document.getElementById('note_good').innerHTML);">フィードバックをもらう</button>
                    </div>
                    <div class="text-center" id="notes_good"></div>
                    <%= turbo_stream_from "user_#{session.id}" %>
                    <%= turbo_stream_from "spinner" %>
                    <div id="spinner_good"></div>
                    <div class="text-center">
                        <button type="button" class="btn btn-primary next-button" data-next="step-2">次に進む</button>
                    </div>
                </div>
            </div>

            <div id="step-2" class="step mt-4 d-none">
                <label class="form-label fw-bold mr-2">上手くいかなかったこと</label>
                <div class="form-group card" style="border-bottom-left-radius: 0; border-bottom-right-radius: 0;">
                    <div class="card-header p-0 d-flex justify-content-end">
                        <button type="button" class="btn btn-light bg-light" style="border-radius: 5px; font-size: 0.5rem; padding: 5px 10px;" onclick="insertBulletPoint('note_bad');">
                            <i data-lucide="list" style="width: 20px; height: 20px;"></i>
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div contenteditable="true" class="form-control mb-3" id="note_bad"></div>
                    </div>
                    <%= form.hidden_field :bad, id: 'hidden_note_bad' %>
                </div>

                <div class="mt-4">
                    <div class="text-center">
                        <button type="button" class="custom-button" onclick="requestBad(document.getElementById('note_bad').innerHTML);">フィードバックをもらう</button>
                    </div>
                    <div class="text-center" id="notes_bad"></div>
                    <div id="spinner_bad"></div>
                    <div class="text-center d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary back-button" data-back="step-1">戻る</button>
                        <button type="button" class="btn btn-primary next-button" data-next="step-3">次に進む</button>
                    </div>
                </div>
            </div>

            <div id="step-3" class="step mt-4 d-none">
                <label class="form-label fw-bold mr-2">次に意識すること・次に向けて取り組むこと</label>
                <div class="form-group card" style="border-bottom-left-radius: 0; border-bottom-right-radius: 0;">
                    <div class="card-header p-0 d-flex justify-content-end">
                        <button type="button" class="btn btn-light bg-light" style="border-radius: 5px; font-size: 0.5rem; padding: 5px 10px;" onclick="insertBulletPoint('note_next');">
                            <i data-lucide="list" style="width: 20px; height: 20px;"></i>
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div contenteditable="true" class="form-control mb-3" id="note_next"></div>
                    </div>
                    <%= form.hidden_field :next, id: 'hidden_note_next' %>
                </div>

                <div class="mt-4">
                    <div class="text-center">
                        <button type="button" class="custom-button" onclick="requestNext(document.getElementById('note_next').innerHTML);">フィードバックをもらう</button>
                    </div>
                    <div class="text-center" id="notes_next"></div>
                    <div id="spinner_next"></div>
                    <div class="text-center d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary back-button" data-back="step-2">戻る</button>
                        <button type="button" class="btn btn-primary next-button" data-next="step-4">次に進む</button>
                    </div>
                </div>
            </div>

            <div id="step-4" class="step mt-4 d-none">
                <label class="form-label fw-bold mr-2">チームで話し合いたいこと・確認したいこと</label>
                <div class="form-group card" style="border-bottom-left-radius: 0; border-bottom-right-radius: 0;">
                    <div class="card-header p-0 d-flex justify-content-end">
                        <button type="button" class="btn btn-light bg-light" style="border-radius: 5px; font-size: 0.5rem; padding: 5px 10px;" onclick="insertBulletPoint('note_discuss');">
                            <i data-lucide="list" style="width: 20px; height: 20px;"></i>
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div contenteditable="true" class="form-control mb-3" id="note_discuss"></div>
                    </div>
                    <%= form.hidden_field :discuss, id: 'hidden_note_discuss' %>
                </div>

                <div class="mt-4">
                    <div class="text-center">
                        <button type="button" class="custom-button" onclick="requestDiscuss(document.getElementById('note_discuss').innerHTML);">フィードバックをもらう</button>
                    </div>
                    <div class="text-center" id="notes_discuss"></div>
                    <div id="spinner_discuss"></div>
                    <div class="text-center d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary back-button" data-back="step-3">戻る</button>
                        <%= form.submit "完了", class: 'btn btn-success next-button', onclick: "saveContent()" %>
                    </div>
                </div>
            </div>
        </div>
        <% if !request.env['HTTP_USER_AGENT'].include?('Mobile') && video %>
            <!-- タイムスタンプリスト -->
            <div id="timestamp-list" class="for-pc mt-3" style="margin-top: 10px;">
                <div class="d-flex justify-content-between align-items-center" style="margin-right: 10px;">
                    <%# <button class="modal-open btn btn-dark d-block rounded-circle bg-black" style="margin-bottom: 20px;">
                        <i class="fas fa-plus"></i>
                    </button> %>
                </div>

                <ul class="timestamp-list">
                    <% video.timestamps.order(time_s: :asc).each do |timestamp| %>
                    <li>
                        <div class="card timestamp-card">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                            <a href="#" id = "timestamp-link" class="timestamp-link" data-turbo="false" onclick="jumpTo(<%= timestamp.time_s %>)">
                                <span class="timestamp-description"><%= timestamp.description %></span>
                                <span class="timestamp-time"><%= "#{(timestamp.time_s / 60).to_i}:#{(timestamp.time_s % 60).to_i}" %></span>
                            </a>
                            </div>
                        </div>
                        </div>
                    </li>
                    <% end %>
                </ul>
            </div>
        <% end %>
    </div>
<% end %>

<script>
    $(function(){
        var loc=false;
        $(window).bind("beforeunload", function(e) {
            // 確認メッセージに表示させたい文字列
            if (!loc) {
                return "入力は完了していません｡";
            }
        });
        // aリンクを遷移OKにする場合はこのコメントを外す
        $('a').click( function() {loc=true;});
        $("button").submit(function(){loc=true;});
    });

    // Turndown インスタンスの作成
    const turndownService = new TurndownService();

    document.addEventListener("turbo:load", function() {
        document.querySelectorAll(".next-button").forEach(button => {
            button.addEventListener("click", function() {
                let nextStep = document.getElementById(this.dataset.next);
                let currentStep = this.closest(".step");
                
                if (nextStep) {
                    currentStep.classList.add("d-none");
                    nextStep.classList.remove("d-none");
                }
            });
        });

        document.querySelectorAll(".back-button").forEach(button => {
            button.addEventListener("click", function() {
                let backStep = document.getElementById(this.dataset.back);
                let currentStep = this.closest(".step");
                
                if (backStep) {
                    currentStep.classList.add("d-none");
                    backStep.classList.remove("d-none");
                }
            });
        });
    });

    function insertBulletPoint(noteId) {
        const noteField = document.getElementById(noteId);
        const bulletPoint = document.createElement("li");
        bulletPoint.contentEditable = true; // リスト項目を編集可能にする
        bulletPoint.innerText = ""; // デフォルトのテキスト
        const list = document.createElement("ul"); // 新しいリストを作成
        list.style.marginLeft = "-10px"; // 左のマージンを設定
        list.appendChild(bulletPoint); // リストに項目を追加

        // 現在のカーソル位置にリストを挿入
        const selection = window.getSelection();
        const range = selection.getRangeAt(0);
        if (range) {
            range.insertNode(list);
            range.collapse(false); // カーソルをリストの後ろに移動
        } else {
            // カーソルが見つからなかった場合、リストを末尾に追加
            const noteField = document.getElementById(noteId);
            noteField.appendChild(list);
        }
    }

    // var $input_good = $('#note_good');
    // // trixのイベントをリッスンしてsuggestion-changedを初期化
    // $input_good.on('trix-initialize', function() {
    //     $(this).data('suggestion-changed', false);
    // });

    // // 手動フォーカスを検出するフラグを追加
    // var isManualFocus_Good = false;

    // // マウスダウンまたはタッチスタート時にフラグをセット
    // $input_good.on('mousedown touchstart', function() {
    //     isManualFocus_Good = true;
    // });

    // $input_good.on('trix-focus', function() {
    //     if (isManualFocus_Good) {
    //         $input_good.find('*').removeClass('highlight-green');
    //         $input_good.data('suggestion-changed', false);
    //     }
    // });

    // $input_good.on('trix-change', function(event) {
    //     // HTML をマークダウンに変換
    //     const markdown = turndownService.turndown(event.target.innerHTML);
    //     $input_good.find('*').removeClass('highlight-green');
    //     // 変更フラグをセット
    //     $('#note_good').data('changed', true);
    // });

    function requestGood(context) {
        const markdown = turndownService.turndown(context);
        
        fetch('/notes/gpt_api_request_good', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // CSRFトークンをmetaタグから取得して設定
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({data: { value: markdown, user_id: parseInt(document.getElementById("good").getAttribute("data-user-id")), token: document.getElementById("good").getAttribute("data-token"), group_id: parseInt(document.getElementById("good").getAttribute("data-group-id")), note_for: document.getElementById("good").getAttribute("data-note-for") }})
        }).then(response => {
        }).catch(error => {
            console.error('Error:', error);
        });
    }

    // var $input_bad = $('#note_bad');
    // // trixのイベントをリッスンしてsuggestion-changedを初期化
    // $input_bad.on('trix-initialize', function() {
    //     $(this).data('suggestion-changed', false);
    // });

    // // 手動フォーカスを検出するフラグを追加
    // var isManualFocus_Bad = false;

    // // マウスダウンまたはタッチスタート時にフラグをセット
    // $input_bad.on('mousedown touchstart', function() {
    //     isManualFocus_Bad = true;
    // });

    // $input_bad.on('trix-focus', function() {
    //     if (isManualFocus_Bad) {
    //         console.log("focus...");
    //         $input_bad.find('*').removeClass('highlight-green');
    //         $input_bad.data('suggestion-changed', false);
    //     }
    // });

    // $input_bad.on('trix-change', function(event) {
    //     // HTML をマークダウンに変換
    //     const markdown = turndownService.turndown(event.target.innerHTML);
    //     // 変更フラグをセット
    //     $input_bad.data('changed', true);
    //     $input_bad.find('*').removeClass('highlight-green');
    // });
    // // フォームに入力され、ポインターがテキストボックスから外れた時に発火するイベント
    // $input_bad.on('trix-blur', function(event) {
    //     isManualFocus_Bad = false;
    //     if ($input_bad.data('changed')) {
    //         if ($input_bad.data('suggestion-changed') === false) {
    //             console.log("We'll request api...")
    //             // HTML をマークダウンに変換
    //             const markdown = turndownService.turndown(event.target.innerHTML);
                
    //             fetch('/notes/gpt_api_request_bad', {
    //                 method: 'POST',
    //                 headers: {
    //                     'Content-Type': 'application/json',
    //                     // CSRFトークンをmetaタグから取得して設定
    //                     'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    //                 },
    //                 body: JSON.stringify({data: { value: markdown, user_id: parseInt(document.getElementById("good").getAttribute("data-user-id")), token: document.getElementById("good").getAttribute("data-token"), group_id: parseInt(document.getElementById("good").getAttribute("data-group-id")), note_for: document.getElementById("good").getAttribute("data-note-for") }})
    //             });
    //         } else {
    //             $input_bad.data('changed', false);
    //         }
    //     }
    // });

    // var $input_next = $('#note_next');
    // $input_next.on('trix-change', function(event) {
    //     // HTML をマークダウンに変換
    //     const markdown = turndownService.turndown(event.target.innerHTML);
    //     // 変更フラグをセット
    //     $input_next.data('changed', true);
    // });

    // // フォームに入力され、ポインターがテキストボックスから外れた時に発火するイベント
    // $input_next.on('trix-blur', function(event) {
    //     if ($input_next.data('changed')) {
    //         console.log("We'll request api...")
    //         // HTML をマークダウンに変換
    //         const markdown = turndownService.turndown(event.target.innerHTML);
            
    //         fetch('/notes/gpt_api_request_next', {
    //             method: 'POST',
    //             headers: {
    //                 'Content-Type': 'application/json',
    //                 // CSRFトークンをmetaタグから取得して設定
    //                 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    //             },
    //             body: JSON.stringify({data: { value: markdown, user_id: parseInt(document.getElementById("good").getAttribute("data-user-id")), token: document.getElementById("good").getAttribute("data-token"), group_id: parseInt(document.getElementById("good").getAttribute("data-group-id")), note_for: document.getElementById("good").getAttribute("data-note-for") }})
    //         });
    //         $input_next.data('changed', false);
    //     }
    // });

    function replaceWith(type, suggestion_title) {
        console.log("type: ", type);
        console.log("suggestion_title");
        // 選択されているラジオボタンを取得
        const selectedRadio = document.querySelector('input[name="custom-radio"]:checked');
        if (selectedRadio) {
            // ラジオボタンの親要素からテキストを取得
            const selectedText = selectedRadio.parentElement.textContent.trim();
            console.log(selectedText);
            const trix_editor = document.getElementById(`${type}`).editor;
            const documentText = trix_editor.getDocument().toString();
            const index = documentText.indexOf(suggestion_title);
            if (index != -1) {
                trix_editor.setSelectedRange([index, suggestion_title.length])
                console.log(`${[index, suggestion_title.length]}`);
                trix_editor.deleteInDirection("backward")
            }
            trix_editor.insertHTML(`<span class='highlight-green'>${selectedText}</span>`);
        } else {
            
        }
    }

    function saveContent() {
        document.getElementById('hidden_note_good').value = document.getElementById('note_good').innerText;
        document.getElementById('hidden_note_bad').value = document.getElementById('note_bad').innerText;
        document.getElementById('hidden_note_next').value = document.getElementById('note_next').innerText;
        document.getElementById('hidden_note_discuss').value = document.getElementById('note_discuss').innerText;
    }

    // ステップに応じてプログレスバーを更新する関数
    function updateProgressBar(step) {
        const totalSteps = 4; // ステップの総数
        for (let i = 1; i <= totalSteps; i++) {
            const progressStep = document.getElementById(`progress-step-${i}`);
            if (i <= step) {
                progressStep.classList.remove('inactive');
            } else {
                progressStep.classList.add('inactive');
            }
        }
        // プログレステキストを更新
        if (step == totalSteps) {
            document.getElementById('progress-text').innerText = `${step}/${totalSteps} ステップ完了 ✅`;
        } else {
            document.getElementById('progress-text').innerText = `${step}/${totalSteps} ステップ完了`;
        }
        
    }

    document.addEventListener("turbo:load", function() {
        // 初期ステップを設定
        let currentStep = 0;
        updateProgressBar(currentStep);

        document.querySelectorAll(".next-button").forEach(button => {
            button.addEventListener("click", function() {
                currentStep = countValidTextBoxes().length;
                updateProgressBar(currentStep);
            });
        });

        document.querySelectorAll(".back-button").forEach(button => {
            button.addEventListener("click", function() {
                currentStep = countValidTextBoxes().length;
                updateProgressBar(currentStep);
            });
        });
    });

    function countValidTextBoxes() {
        const textBoxes = ['note_good', 'note_bad', 'note_next', 'note_discuss'];
        let notEmpty = [];
        for (let i = 0; i < textBoxes.length; i++) {
            const noteContent = document.getElementById(textBoxes[i]).innerText;
            if (noteContent.trim() !== "") {
                notEmpty.push(i + 1);
            }
        }
        return notEmpty;
    }

    lucide.createIcons();

</script>

<% if @with_video && @video_id %>
    <script>
        const player = videojs('video', {
            autoplay: false, // 自動再生を無効
            fluid: true, // 動画コンテンツを親要素いっぱいに広げる
            loop: false, // 繰り返し再生無効
            controls: true, // コントローラ表示
            playbackRates: [0.5, 1, 1.3, 1.5], // 再生速度の倍率
            controlBar: {
                pictureInPictureToggle: false, // ピクチャーインピクチャーを無効にする
                fullscreenToggle: true, // 全画面ボタンを有効にする
                volumePanel: false // 音声バーを無効にする

            }
        });
        var video_el = document.getElementById("video");

        // videojsのreadyイベントを使用して、メタデータがロードされたときの処理を設定
        player.ready(function() {
            var self = this;
            self.on('loadedmetadata', () => {
            console.log('loaded meta data.');
            // コントローラに10秒戻しボタンと10秒送りボタンを追加
            const rewindButton = player.getChild('ControlBar').addChild('button');
            const forwardButton = player.getChild('ControlBar').addChild('button');
            rewindButton.controlText('10秒戻し');
            forwardButton.controlText('10秒り');

            rewindButton.el().style.marginRight = '-6px';
            forwardButton.el().style.marginLeft = '-6px';

            // アイコンを設定
            const controlBar = player.getChild('ControlBar');
            const fullscreenToggle = controlBar.getChild('fullscreenToggle');

            // 挿入位置を決定（PiPボタンが存在しない場合は全画面ボタンの前に挿入）
            const insertBeforeElement = fullscreenToggle;

            if (insertBeforeElement) {
                controlBar.el().insertBefore(
                rewindButton.el(),
                insertBeforeElement.el()
                ).innerHTML = `<img src="<%= asset_path 'rewind.png' %>" width="20" />`;
                
                controlBar.el().insertBefore(
                forwardButton.el(),
                insertBeforeElement.el()
                ).innerHTML = `<img src="<%= asset_path 'forward.png' %>" width="20" />`;
            } else {
                // デフォルトの挿入位置（最後）に追加
                controlBar.el().appendChild(rewindButton.el()).innerHTML = `<img src="<%= asset_path 'rewind.png' %>" width="20" />`;
                controlBar.el().appendChild(forwardButton.el()).innerHTML = `<img src="<%= asset_path 'forward.png' %>" width="20" />`;
            }

            // スキップ処理を追加
            rewindButton.el().addEventListener('click', () => {
                var newTime = self.currentTime() - 10;
                if (newTime < 0) newTime = 0; // 現在時刻が0未満にならないように調整
                self.currentTime(newTime);
            });
            
            forwardButton.el().addEventListener('click', () => {
                var newTime = self.currentTime() + 10;
                var maxTime = self.duration(); // ビデオの長さを取得
                if (newTime > maxTime) newTime = maxTime; // 現在時刻がビデオの長さ以上にならないように調整
                self.currentTime(newTime);
            });

            document.addEventListener('keydown', function (e) {
                if (e.code == 'ArrowLeft') {
                var newTime = self.currentTime() - 10;
                if (newTime < 0) newTime = 0; // 現在時刻が0未満にならないように調
                self.currentTime(newTime);
                } else if (e.code == 'ArrowRight') {
                var newTime = self.currentTime() + 10;
                var maxTime = self.duration(); // ビデオの長さを取得
                if (newTime > maxTime) newTime = maxTime; // 現在時刻がビデオの長さ以上にならないように調整
                self.currentTime(newTime);
                }
            })
            });
        });

        function jumpTo(time) {
            player.currentTime(time);
        }

        document.addEventListener("trix-initialize", function(event) {
            const buttonHTML = '<button type="button" class="trix-button" onclick="insertCurrentTime(this.closest(\'.form-group\').id);" title="動画の現在の時間を挿入できます。" tabindex="-1" style="font-size: 100%; width: 3.0em;"><i class="fas fa-clock" style="color: black;"></i></button>';
            event.target.toolbarElement.querySelector(".trix-button-group--file-tools").insertAdjacentHTML("beforeend", buttonHTML);
        });

        function insertCurrentTime(section) {
            const player = videojs('video');
            const currentTime = player.currentTime();
            const minutes = Math.floor(currentTime / 60);
            const seconds = Math.floor(currentTime % 60);
            const timeString = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            const goodField = document.getElementById('note_good');
            const badField = document.getElementById('note_bad');
            const nextField = document.getElementById('note_next');
            const discussField = document.getElementById('note_discuss');
            let field;
            switch (section) {
                case "good":
                    field = goodField;
                    break;
                case "bad":
                    field = badField;
                    break;
                case "next":
                    field = nextField;
                    break;
                case "discuss":
                    field = discussField;
                    break;
                default:
                    field = discussField;
            }
            const trixEditor = field.editor;
            trixEditor.insertString(` ${timeString}`);
        }
    </script>
<% end %>