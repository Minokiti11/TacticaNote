<script src="https://vjs.zencdn.net/7.20.2/video.min.js"></script>
<link href="https://vjs.zencdn.net/7.20.2/video-js.css" rel="stylesheet" />
<style>
    #video {
        width: 499px;
        height: 281px;
    }
    @media screen and (max-width: 767px) {
        /*　横幅が767pxより小さい時に適用するスタイル　*/
        #video {
            width: 100%;
            height: 100%;
            margin:0 auto;
            padding-top:56.25%;/*比率調整※16:9の画面幅*/
        }
    }
</style>
<%= form_with model: @note, local: true, html: {class: "needs-validation", novalidate: true} do |form| %>
    <div class="container mt-3">
        <% if @with_video && @video_id %>
            <% video = Video.find_by(id: @video_id)%>
            <video class="video-js vjs-big-play-centered" preload="metadata" controls playsinline id="video">
                <source src="<%= rails_blob_path(video.video) %>" type="video/mp4">
            </video>

            <div class="h3" style="margin-top: 40px; margin-bottom: 50px; font-weight: 700;">
                <%= video.title %>  : ノートの作成
            </div>
        <% else %>
            <div class="h3" style="margin-top: 40px; margin-bottom: 50px; font-weight: 700;">
                ノートの作成
            </div>
        <% end %>

        <!--
        <script src="https://cdn.tailwindcss.com"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
        <div class="flex items-center justify-center" style="margin-top: 30px; margin-bottom: 30px;">
            <div class="bg-white rounded-lg shadow-lg p-6 w-full lg:w-3/4">
                <div class="flex justify-between items-center mb-4">
                    <h1 class="text-gray-400 text-lg">Add a title—what are you aligning on?</h1>
                    <span class="text-gray-400">杉村実紀 voted</span>
                </div>
                <div class="relative mb-4">
                    <div class="h-2 bg-gradient-to-r from-red-500 via-yellow-500 to-green-500 rounded-full"></div>
                    <div class="absolute inset-0 flex justify-between items-center px-4">
                        <div class="h-6 w-1 bg-red-500 rounded-full" style="position: absolute; left: 0;"></div>
                        <div class="h-6 w-1 bg-gradient-to-r from-red-500 to-yellow-500 rounded-full" style="position: absolute; left: 25%;"></div>
                        <div class="h-6 w-1 bg-yellow-500 rounded-full" style="position: absolute; left: 50%;"></div>
                        <div class="h-6 w-1 bg-gradient-to-r from-yellow-500 to-green-500 rounded-full" style="position: absolute; left: 75%;"></div>
                        <div class="h-6 w-1 bg-green-500 rounded-full" style="position: absolute; right: 0;"></div>
                    </div>
                    <div class="absolute inset-0 flex justify-center items-center">
                        <div class="bg-green-800 text-white rounded-full h-8 w-8 flex items-center justify-center text-sm">実紀</div>
                    </div>
                </div>
                <div class="flex justify-between items-center mb-4">
                    <span class="text-red-500 w-1/4 text-center">Strongly<br>disagree</span>
                    <span class="text-yellow-500 w-1/2 text-center">Neutral</span>
                    <span class="text-green-500 w-1/4 text-center">Strongly<br>agree</span>
                </div>
                <%# <div class="flex justify-center">
                    <button class="bg-purple-500 text-white py-2 px-4 rounded-full flex items-center">
                        <i class="fas fa-eye mr-2"></i> Results revealed
                    </button>
                </div> %>
            </div>
        </div>
        -->

        <!-- タイトル入力フォーム -->
        <div class="form-group">
            <label id="title" for="note_title" class="form-label">タイトル</label>
            <%= form.text_field :title, class: 'form-control mb-3', id: 'note_title', placeholder: '例：「vs_〇〇の振り返り」「ビルドアップについて」)', style: "padding: 10px;" %>
        </div>


        <!-- 上手くいった点の入力フォーム -->
        <div class="form-group" id="div_good" data-group-id="<%= params[:group_id]%>">
            <label for="note_good" class="form-label">上手くいったこと</label>
            <%# <%= form.rich_text_area :good, class: 'mb-3', id: 'note_good', placeholder: '上手くいった点を記入'%>
            <%= form.text_area :good, class: 'form-control mb-3', id: 'note_good', placeholder: '上手くいった点を記入
(〇〇:〇〇のようにして、動画の指定された秒数を再生できます。　例：4:35, 07:56)', style: "padding: 10px; max-height: 400px; height: 100px;" %>
        </div>
        <div id="notes_good_rate">
        </div><br />

        <div id="notes_good">
            <!-- ここにメッセージがリアルタイムで表示される -->
        </div><br />
        <%= turbo_stream_from "rate" %>
        <%= turbo_stream_from "user_#{session.id}" %>
        <%= turbo_stream_from "spinner" %>
        <div id="spinner_good"></div>
        
        
        <!-- 上手くいかなかった点の入力フォーム -->
        <div class="form-group">
            <label for="note_bad" class="form-label">上手くいかなかったこと</label>
            <%= form.text_area :bad, class: 'form-control mb-3', id: 'note_bad', placeholder: '上手くいかなかった点を記入
(〇〇:〇〇のようにして、動画の指定された秒数を再生できます。　例：4:35, 07:56)', style: "padding: 10px; max-height: 400px; height: 100px;" %>
        </div>
        <div id="notes_bad">
            <!-- ここにメッセージがリアルタイムで表示される -->
        </div><br />
        <div id="spinner_bad"></div>

        <!-- 次のステップの入力フォーム -->
        <div class="form-group" id="div_next">
            <label for="note_next" class="form-label">次に意識すること・次に向けて取り組むこと</label>
            <%= form.text_area :next, class: 'form-control mb-3', id: 'note_next', placeholder: '次に向けて取り組むことを記入
(〇〇:〇〇のようにして、動画の指定された秒数を再生できます。　例：4:35, 07:56)', style: "padding: 10px; max-height: 400px; height: 100px;" %>
            <div id="links">

            </div>
        </div>
        <div id="notes_next">
            <!-- ここにメッセージがリアルタイムで表示される -->
        </div><br />
        <div id="spinner_next"></div>

        <!-- 話し合いたいこと・確認したいことの入力フォーム -->
        <div class="form-group" id="div_discuss">
            <label for="note_discuss" class="form-label">チームで話し合いたいこと・確認したいこと</label>
            <%= form.rich_text_area :discuss, id: 'note_discuss', placeholder: 'ミーティングなどでチームで話し合いたいこと・確認したいこと
@someoneのようにしてチームのメンバーをメンションできます。', style: "height: 100px;", data: { controller: "mentions", mentions_target: "field" } %>
            <div id="links">

            </div>
        </div>
        <div id="notes_discuss">
            <!-- ここにメッセージがリアルタイムで表示される -->
        </div><br />
        <div id="spinner_discuss"></div>

        <!-- 送信ボタン -->
        <div class="form-group">
            <%= form.button "作成", type: 'button', onclick: 'submit();', class: 'btn btn-outline-primary', style: "border-radius: 1;" %>
        </div>
        <br />
    </div>
<% end %>

<script>
    $(function(){
        var loc=false;
        $(window).bind("beforeunload", function(e) {
            // 確認メッセージに表示させたい文字列
            if (!loc) {
                return "入力は完了していません｡";
            }
        });
        // aリンクを遷移OKにする場合はこのコメントを外す
        $('a').click( function() {loc=true;});
        $("button").submit(function(){loc=true;});
    });

    var $input_good = $('#note_good');
    // フォームに入力され、ポインターがテキストボックスから外れた時に発火するイベント
    $input_good.on('change', function(event) {
        fetch('/notes/gpt_api_request_good', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // CSRFトークンをmetaタグから取得して設定
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({data: { value: $input_good.val(), group_id: parseInt(document.getElementById("div_good").getAttribute("data-group-id")) }})
        });
    });

    var $input_bad = $('#note_bad');
    // フォームに入力され、ポインターがテキストボックスから外れた時に発火するイベント
    $input_bad.on('change', function(event) {
        fetch('/notes/gpt_api_request_bad', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // CSRFトークンをmetaタグから取得して設定
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({data: { value: $input_bad.val() }})
        });
    });

    var $input_next = $('#note_next');

    let id;
    $input_next.on('input', function(event) {
        clearTimeout(id);// タイマーストップ
        id = setTimeout(fire,8000);// タイマーリセット（8秒）
    });

    // 実際にnotes_controllerのメソッドを呼ぶ部分
    var fire = function() {
        fetch('/notes/gpt_api_request_next', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // CSRFトークンをmetaタグから取得して設定
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({data: { value: $input_next.val() }})
        });
    };
</script>

<% if @with_video && @video_id %>
    <script>
    const player = videojs('video', {
        autoplay: false, // 自動再生を無効
        fluid: false, // 動画コンテンツを親要素いっぱいに広げる
        loop: false, // 繰り返し再生無効
        controls: true, // コントローラ表示
        playbackRates: [0.5, 1, 1.3, 1.5], // 再生速度の倍率
    });
    var video_el = document.getElementById("video");

    // videojsのreadyイベントを使用して、メタデータがロードされたときの処理を設定
    player.ready(function() {
        var self = this;
        self.on('loadedmetadata', () => {
            // コントローラに10秒戻しボタンと10秒送りボタンを追加
            const rewindButton = player.getChild('ControlBar').addChild('button');
            const forwardButton = player.getChild('ControlBar').addChild('button');
            rewindButton.controlText('10秒戻し');
            forwardButton.controlText('10秒送り');

            // アイコンを設定
            player.getChild('ControlBar')
                .el()
                .insertBefore(
                    rewindButton.el(),
                    player.getChild('ControlBar').getChild('pictureInPictureToggle').el()
                )
                .innerHTML = `<img src=<%= asset_path 'rewind.png' %> width=20 />`;

            player.getChild('ControlBar')
                .el()
                .insertBefore(
                    forwardButton.el(),
                    player.getChild('ControlBar').getChild('pictureInPictureToggle').el()
                )
                .innerHTML = `<img src=<%= asset_path 'forward.png' %> width=20 />`;

            // スキップ処理を追加
            rewindButton.el().addEventListener('click', () => {
                var newTime = this.currentTime() - 10;
                if (newTime < 0) newTime = 0; //現在時刻が0未満にならないように調整
                this.currentTime(newTime);
            });
            
            forwardButton.el().addEventListener('click', () => {
                var newTime = this.currentTime() + 10;
                var maxTime = this.duration(); // ビデオの長さを取得
                if (newTime > maxTime) newTime = maxTime; //現在時刻がビデオの長さ以上にならないように調整
                this.currentTime(newTime);
            });

            document.addEventListener('keydown', function (e) {
                if (player.paused() == false) {
                    if (e.code == 'ArrowLeft') {
                        var newTime = self.currentTime() - 10;
                        if (newTime < 0) newTime = 0; //現在時刻が0未満にならないように調整
                        self.currentTime(newTime);
                    } else if (e.code == 'ArrowRight') {
                        var newTime = self.currentTime() + 10;
                        var maxTime = self.duration(); // ビデオの長さを取得
                        if (newTime > maxTime) newTime = maxTime; //現在時刻がビデオの長さ以上にならないように調整
                        self.currentTime(newTime);
                    }
                }

            })
        });
    });
    </script>
<% end %>