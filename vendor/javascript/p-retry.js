// p-retry@6.2.1 downloaded from https://ga.jspm.io/npm:p-retry@6.2.1/index.js

import r from"retry";import t from"is-network-error";class AbortError extends Error{constructor(r){super();if(r instanceof Error){this.originalError=r;({message:r}=r)}else{this.originalError=new Error(r);this.originalError.stack=this.stack}this.name="AbortError";this.message=r}}const decorateErrorWithCounts=(r,t,o)=>{const e=o.retries-(t-1);r.attemptNumber=t;r.retriesLeft=e;return r};async function pRetry(o,e){return new Promise(((s,n)=>{e={...e};e.onFailedAttempt??=()=>{};e.shouldRetry??=()=>true;e.retries??=10;const i=r.operation(e);const abortHandler=()=>{i.stop();n(e.signal?.reason)};e.signal&&!e.signal.aborted&&e.signal.addEventListener("abort",abortHandler,{once:true});const cleanUp=()=>{e.signal?.removeEventListener("abort",abortHandler);i.stop()};i.attempt((async r=>{try{const t=await o(r);cleanUp();s(t)}catch(o){try{if(!(o instanceof Error))throw new TypeError(`Non-error was thrown: "${o}". You should only throw errors.`);if(o instanceof AbortError)throw o.originalError;if(o instanceof TypeError&&!t(o))throw o;decorateErrorWithCounts(o,r,e);if(!await e.shouldRetry(o)){i.stop();n(o)}await e.onFailedAttempt(o);if(!i.retry(o))throw i.mainError()}catch(t){decorateErrorWithCounts(t,r,e);cleanUp();n(t)}}}))}))}export{AbortError,pRetry as default};

