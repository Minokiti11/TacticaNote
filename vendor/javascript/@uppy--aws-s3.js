// @uppy/aws-s3@4.2.3 downloaded from https://ga.jspm.io/npm:@uppy/aws-s3@4.2.3/lib/index.js

import{BasePlugin as e}from"@uppy/core";import{RequestClient as t}from"@uppy/companion-client";import s from"@uppy/core/lib/EventManager.js";import{RateLimitedQueue as a}from"@uppy/utils/lib/RateLimitedQueue";import{filterNonFailedFiles as i,filterFilesToEmitUploadStarted as o}from"@uppy/utils/lib/fileFilters";import{AbortController as r,createAbortError as l}from"@uppy/utils/lib/AbortController";import n from"@uppy/utils/lib/getAllowedMetaFields";function _classPrivateFieldLooseBase$2(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var d=0;function _classPrivateFieldLooseKey$2(e){return"__private_"+d+++"_"+e}const c=1048576;const u={getChunkSize(e){return Math.ceil(e.size/1e4)},onProgress(){},onPartComplete(){},onSuccess(){},onError(e){throw e}};function ensureInt(e){if(typeof e==="string")return parseInt(e,10);if(typeof e==="number")return e;throw new TypeError("Expected a number")}const p=Symbol("pausing upload, not an actual error");var h=_classPrivateFieldLooseKey$2("abortController");var v=_classPrivateFieldLooseKey$2("chunks");var P=_classPrivateFieldLooseKey$2("chunkState");var y=_classPrivateFieldLooseKey$2("data");var m=_classPrivateFieldLooseKey$2("file");var F=_classPrivateFieldLooseKey$2("uploadHasStarted");var _=_classPrivateFieldLooseKey$2("onError");var L=_classPrivateFieldLooseKey$2("onSuccess");var f=_classPrivateFieldLooseKey$2("shouldUseMultipart");var b=_classPrivateFieldLooseKey$2("isRestoring");var g=_classPrivateFieldLooseKey$2("onReject");var $=_classPrivateFieldLooseKey$2("maxMultipartParts");var w=_classPrivateFieldLooseKey$2("minPartSize");var B=_classPrivateFieldLooseKey$2("initChunks");var U=_classPrivateFieldLooseKey$2("createUpload");var C=_classPrivateFieldLooseKey$2("resumeUpload");var S=_classPrivateFieldLooseKey$2("onPartProgress");var O=_classPrivateFieldLooseKey$2("onPartComplete");var k=_classPrivateFieldLooseKey$2("abortUpload");class MultipartUploader{constructor(e,t){var s,a;Object.defineProperty(this,k,{value:_abortUpload2});Object.defineProperty(this,C,{value:_resumeUpload2});Object.defineProperty(this,U,{value:_createUpload2});Object.defineProperty(this,B,{value:_initChunks2});Object.defineProperty(this,h,{writable:true,value:new r});Object.defineProperty(this,v,{writable:true,value:[]});Object.defineProperty(this,P,{writable:true,value:[]});Object.defineProperty(this,y,{writable:true,value:void 0});Object.defineProperty(this,m,{writable:true,value:void 0});Object.defineProperty(this,F,{writable:true,value:false});Object.defineProperty(this,_,{writable:true,value:void 0});Object.defineProperty(this,L,{writable:true,value:void 0});Object.defineProperty(this,f,{writable:true,value:void 0});Object.defineProperty(this,b,{writable:true,value:void 0});Object.defineProperty(this,g,{writable:true,value:e=>(e==null?void 0:e.cause)===p?null:_classPrivateFieldLooseBase$2(this,_)[_](e)});Object.defineProperty(this,$,{writable:true,value:1e4});Object.defineProperty(this,w,{writable:true,value:5*c});Object.defineProperty(this,S,{writable:true,value:e=>t=>{if(!t.lengthComputable)return;_classPrivateFieldLooseBase$2(this,P)[P][e].uploaded=ensureInt(t.loaded);const s=_classPrivateFieldLooseBase$2(this,P)[P].reduce(((e,t)=>e+t.uploaded),0);this.options.onProgress(s,_classPrivateFieldLooseBase$2(this,y)[y].size)}});Object.defineProperty(this,O,{writable:true,value:e=>t=>{_classPrivateFieldLooseBase$2(this,v)[v][e]=null;_classPrivateFieldLooseBase$2(this,P)[P][e].etag=t;_classPrivateFieldLooseBase$2(this,P)[P][e].done=true;const s={PartNumber:e+1,ETag:t};this.options.onPartComplete(s)}});this.options={...u,...t};(a=(s=this.options).getChunkSize)!=null?a:s.getChunkSize=u.getChunkSize;_classPrivateFieldLooseBase$2(this,y)[y]=e;_classPrivateFieldLooseBase$2(this,m)[m]=t.file;_classPrivateFieldLooseBase$2(this,L)[L]=this.options.onSuccess;_classPrivateFieldLooseBase$2(this,_)[_]=this.options.onError;_classPrivateFieldLooseBase$2(this,f)[f]=this.options.shouldUseMultipart;_classPrivateFieldLooseBase$2(this,b)[b]=t.uploadId&&t.key;_classPrivateFieldLooseBase$2(this,B)[B]()}start(){if(_classPrivateFieldLooseBase$2(this,F)[F]){_classPrivateFieldLooseBase$2(this,h)[h].signal.aborted||_classPrivateFieldLooseBase$2(this,h)[h].abort(p);_classPrivateFieldLooseBase$2(this,h)[h]=new r;_classPrivateFieldLooseBase$2(this,C)[C]()}else if(_classPrivateFieldLooseBase$2(this,b)[b]){this.options.companionComm.restoreUploadFile(_classPrivateFieldLooseBase$2(this,m)[m],{uploadId:this.options.uploadId,key:this.options.key});_classPrivateFieldLooseBase$2(this,C)[C]()}else _classPrivateFieldLooseBase$2(this,U)[U]()}pause(){_classPrivateFieldLooseBase$2(this,h)[h].abort(p);_classPrivateFieldLooseBase$2(this,h)[h]=new r}abort(e){e!=null&&e.really?_classPrivateFieldLooseBase$2(this,k)[k]():this.pause()}[Symbol.for("uppy test: getChunkState")](){return _classPrivateFieldLooseBase$2(this,P)[P]}}function _initChunks2(){const e=_classPrivateFieldLooseBase$2(this,y)[y].size;const t=typeof _classPrivateFieldLooseBase$2(this,f)[f]==="function"?_classPrivateFieldLooseBase$2(this,f)[f](_classPrivateFieldLooseBase$2(this,m)[m]):Boolean(_classPrivateFieldLooseBase$2(this,f)[f]);if(t&&e>_classPrivateFieldLooseBase$2(this,w)[w]){let s=Math.max(this.options.getChunkSize(_classPrivateFieldLooseBase$2(this,y)[y]),_classPrivateFieldLooseBase$2(this,w)[w]);let a=Math.floor(e/s);if(a>_classPrivateFieldLooseBase$2(this,$)[$]){a=_classPrivateFieldLooseBase$2(this,$)[$];s=e/_classPrivateFieldLooseBase$2(this,$)[$]}_classPrivateFieldLooseBase$2(this,v)[v]=Array(a);for(let a=0,i=0;a<e;a+=s,i++){const o=Math.min(e,a+s);const getData=()=>{const e=a;return _classPrivateFieldLooseBase$2(this,y)[y].slice(e,o)};_classPrivateFieldLooseBase$2(this,v)[v][i]={getData:getData,onProgress:_classPrivateFieldLooseBase$2(this,S)[S](i),onComplete:_classPrivateFieldLooseBase$2(this,O)[O](i),shouldUseMultipart:t};if(_classPrivateFieldLooseBase$2(this,b)[b]){const t=a+s>e?e-a:s;_classPrivateFieldLooseBase$2(this,v)[v][i].setAsUploaded=()=>{_classPrivateFieldLooseBase$2(this,v)[v][i]=null;_classPrivateFieldLooseBase$2(this,P)[P][i].uploaded=t}}}}else _classPrivateFieldLooseBase$2(this,v)[v]=[{getData:()=>_classPrivateFieldLooseBase$2(this,y)[y],onProgress:_classPrivateFieldLooseBase$2(this,S)[S](0),onComplete:_classPrivateFieldLooseBase$2(this,O)[O](0),shouldUseMultipart:t}];_classPrivateFieldLooseBase$2(this,P)[P]=_classPrivateFieldLooseBase$2(this,v)[v].map((()=>({uploaded:0})))}function _createUpload2(){this.options.companionComm.uploadFile(_classPrivateFieldLooseBase$2(this,m)[m],_classPrivateFieldLooseBase$2(this,v)[v],_classPrivateFieldLooseBase$2(this,h)[h].signal).then(_classPrivateFieldLooseBase$2(this,L)[L],_classPrivateFieldLooseBase$2(this,g)[g]);_classPrivateFieldLooseBase$2(this,F)[F]=true}function _resumeUpload2(){this.options.companionComm.resumeUploadFile(_classPrivateFieldLooseBase$2(this,m)[m],_classPrivateFieldLooseBase$2(this,v)[v],_classPrivateFieldLooseBase$2(this,h)[h].signal).then(_classPrivateFieldLooseBase$2(this,L)[L],_classPrivateFieldLooseBase$2(this,g)[g])}function _abortUpload2(){_classPrivateFieldLooseBase$2(this,h)[h].abort();this.options.companionComm.abortFileUpload(_classPrivateFieldLooseBase$2(this,m)[m]).catch((e=>this.options.log(e)))}function throwIfAborted(e){if(e!=null&&e.aborted)throw l("The operation was aborted",{cause:e.reason})}
/**
 * Create a canonical request by concatenating the following strings, separated
 * by newline characters. This helps ensure that the signature that you
 * calculate and the signature that AWS calculates can match.
 *
 * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html#create-canonical-request
 *
 * @param param0
 * @param param0.method – The HTTP method.
 * @param param0.CanonicalUri – The URI-encoded version of the absolute
 * path component URL (everything between the host and the question mark
 * character (?) that starts the query string parameters). If the absolute path
 * is empty, use a forward slash character (/).
 * @param param0.CanonicalQueryString – The URL-encoded query string
 * parameters, separated by ampersands (&). Percent-encode reserved characters,
 * including the space character. Encode names and values separately. If there
 * are empty parameters, append the equals sign to the parameter name before
 * encoding. After encoding, sort the parameters alphabetically by key name. If
 * there is no query string, use an empty string ("").
 * @param param0.SignedHeaders – The request headers,
 * that will be signed, and their values, separated by newline characters.
 * For the values, trim any leading or trailing spaces, convert sequential
 * spaces to a single space, and separate the values for a multi-value header
 * using commas. You must include the host header (HTTP/1.1), and any x-amz-*
 * headers in the signature. You can optionally include other standard headers
 * in the signature, such as content-type.
 * @param param0.HashedPayload – A string created using the payload in
 * the body of the HTTP request as input to a hash function. This string uses
 * lowercase hexadecimal characters. If the payload is empty, use an empty
 * string as the input to the hash function.
 */function createCanonicalRequest(e){let{method:t="PUT",CanonicalUri:s="/",CanonicalQueryString:a="",SignedHeaders:i,HashedPayload:o}=e;const r=Object.keys(i).map((e=>e.toLowerCase())).sort();return[t,s,a,...r.map((e=>`${e}:${i[e]}`)),"",r.join(";"),o].join("\n")}const M=new TextEncoder;const R={name:"HMAC",hash:"SHA-256"};async function digest(e){const{subtle:t}=globalThis.crypto;return t.digest(R.hash,M.encode(e))}async function generateHmacKey(e){const{subtle:t}=globalThis.crypto;return t.importKey("raw",typeof e==="string"?M.encode(e):e,R,false,["sign"])}function arrayBufferToHexString(e){const t=new Uint8Array(e);let s="";for(let e=0;e<t.length;e++)s+=t[e].toString(16).padStart(2,"0");return s}async function hash(e,t){const{subtle:s}=globalThis.crypto;return s.sign(R,await generateHmacKey(e),M.encode(t))}async function createSignedURL(e){let{accountKey:t,accountSecret:s,sessionToken:a,bucketName:i,Key:o,Region:r,expires:l,uploadId:n,partNumber:d}=e;const c="s3";const u=`${c}.${r}.amazonaws.com`;const p=`/${i}/${encodeURI(o).replace(/[;?:@&=+$,#!'()*]/g,(e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))}`;const h="UNSIGNED-PAYLOAD";const v=(new Date).toISOString().replace(/[-:]|\.\d+/g,"");const P=v.slice(0,8);const y=`${P}/${r}/${c}/aws4_request`;const m=new URL(`https://${u}${p}`);m.searchParams.set("X-Amz-Algorithm","AWS4-HMAC-SHA256");m.searchParams.set("X-Amz-Content-Sha256",h);m.searchParams.set("X-Amz-Credential",`${t}/${y}`);m.searchParams.set("X-Amz-Date",v);m.searchParams.set("X-Amz-Expires",l);m.searchParams.set("X-Amz-Security-Token",a);m.searchParams.set("X-Amz-SignedHeaders","host");d&&m.searchParams.set("partNumber",d);n&&m.searchParams.set("uploadId",n);m.searchParams.set("x-id",d&&n?"UploadPart":"PutObject");const F=createCanonicalRequest({CanonicalUri:p,CanonicalQueryString:m.search.slice(1),SignedHeaders:{host:u},HashedPayload:h});const _=arrayBufferToHexString(await digest(F));const L=["AWS4-HMAC-SHA256",v,y,_].join("\n");const f=await hash(`AWS4${s}`,P);const b=await hash(f,r);const g=await hash(b,c);const $=await hash(g,"aws4_request");const w=arrayBufferToHexString(await hash($,L));m.searchParams.set("X-Amz-Signature",w);return m}function _classPrivateFieldLooseBase$1(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var A=0;function _classPrivateFieldLooseKey$1(e){return"__private_"+A+++"_"+e}function removeMetadataFromURL(e){const t=new URL(e);t.search="";t.hash="";return t.href}var j=_classPrivateFieldLooseKey$1("abortMultipartUpload");var I=_classPrivateFieldLooseKey$1("cache");var E=_classPrivateFieldLooseKey$1("createMultipartUpload");var K=_classPrivateFieldLooseKey$1("fetchSignature");var T=_classPrivateFieldLooseKey$1("getUploadParameters");var x=_classPrivateFieldLooseKey$1("listParts");var H=_classPrivateFieldLooseKey$1("previousRetryDelay");var z=_classPrivateFieldLooseKey$1("requests");var q=_classPrivateFieldLooseKey$1("retryDelays");var N=_classPrivateFieldLooseKey$1("sendCompletionRequest");var D=_classPrivateFieldLooseKey$1("setS3MultipartState");var X=_classPrivateFieldLooseKey$1("uploadPartBytes");var Q=_classPrivateFieldLooseKey$1("getFile");var W=_classPrivateFieldLooseKey$1("shouldRetry");var G=_classPrivateFieldLooseKey$1("nonMultipartUpload");class HTTPCommunicationQueue{constructor(e,t,s,a){Object.defineProperty(this,G,{value:_nonMultipartUpload2});Object.defineProperty(this,W,{value:_shouldRetry2});Object.defineProperty(this,j,{writable:true,value:void 0});Object.defineProperty(this,I,{writable:true,value:new WeakMap});Object.defineProperty(this,E,{writable:true,value:void 0});Object.defineProperty(this,K,{writable:true,value:void 0});Object.defineProperty(this,T,{writable:true,value:void 0});Object.defineProperty(this,x,{writable:true,value:void 0});Object.defineProperty(this,H,{writable:true,value:void 0});Object.defineProperty(this,z,{writable:true,value:void 0});Object.defineProperty(this,q,{writable:true,value:void 0});Object.defineProperty(this,N,{writable:true,value:void 0});Object.defineProperty(this,D,{writable:true,value:void 0});Object.defineProperty(this,X,{writable:true,value:void 0});Object.defineProperty(this,Q,{writable:true,value:void 0});_classPrivateFieldLooseBase$1(this,z)[z]=e;_classPrivateFieldLooseBase$1(this,D)[D]=s;_classPrivateFieldLooseBase$1(this,Q)[Q]=a;this.setOptions(t)}setOptions(e){const t=_classPrivateFieldLooseBase$1(this,z)[z];"abortMultipartUpload"in e&&(_classPrivateFieldLooseBase$1(this,j)[j]=t.wrapPromiseFunction(e.abortMultipartUpload,{priority:1}));"createMultipartUpload"in e&&(_classPrivateFieldLooseBase$1(this,E)[E]=t.wrapPromiseFunction(e.createMultipartUpload,{priority:-1}));"signPart"in e&&(_classPrivateFieldLooseBase$1(this,K)[K]=t.wrapPromiseFunction(e.signPart));"listParts"in e&&(_classPrivateFieldLooseBase$1(this,x)[x]=t.wrapPromiseFunction(e.listParts));"completeMultipartUpload"in e&&(_classPrivateFieldLooseBase$1(this,N)[N]=t.wrapPromiseFunction(e.completeMultipartUpload,{priority:1}));if("retryDelays"in e){var s;_classPrivateFieldLooseBase$1(this,q)[q]=(s=e.retryDelays)!=null?s:[]}"uploadPartBytes"in e&&(_classPrivateFieldLooseBase$1(this,X)[X]=t.wrapPromiseFunction(e.uploadPartBytes,{priority:Infinity}));"getUploadParameters"in e&&(_classPrivateFieldLooseBase$1(this,T)[T]=t.wrapPromiseFunction(e.getUploadParameters))}async getUploadId(e,t){let s;while((s=_classPrivateFieldLooseBase$1(this,I)[I].get(e.data))!=null)try{return await s}catch{}const a=_classPrivateFieldLooseBase$1(this,E)[E](_classPrivateFieldLooseBase$1(this,Q)[Q](e),t);const abortPromise=()=>{a.abort(t.reason);_classPrivateFieldLooseBase$1(this,I)[I].delete(e.data)};t.addEventListener("abort",abortPromise,{once:true});_classPrivateFieldLooseBase$1(this,I)[I].set(e.data,a);a.then((async s=>{t.removeEventListener("abort",abortPromise);_classPrivateFieldLooseBase$1(this,D)[D](e,s);_classPrivateFieldLooseBase$1(this,I)[I].set(e.data,s)}),(()=>{t.removeEventListener("abort",abortPromise);_classPrivateFieldLooseBase$1(this,I)[I].delete(e.data)}));return a}async abortFileUpload(e){const t=_classPrivateFieldLooseBase$1(this,I)[I].get(e.data);if(t==null)return;_classPrivateFieldLooseBase$1(this,I)[I].delete(e.data);_classPrivateFieldLooseBase$1(this,D)[D](e,Object.create(null));let s;try{s=await t}catch{return}await _classPrivateFieldLooseBase$1(this,j)[j](_classPrivateFieldLooseBase$1(this,Q)[Q](e),s)}async uploadFile(e,t,s){throwIfAborted(s);if(t.length===1&&!t[0].shouldUseMultipart)return _classPrivateFieldLooseBase$1(this,G)[G](e,t[0],s);const{uploadId:a,key:i}=await this.getUploadId(e,s);throwIfAborted(s);try{const o=await Promise.all(t.map(((t,a)=>this.uploadChunk(e,a+1,t,s))));throwIfAborted(s);return await _classPrivateFieldLooseBase$1(this,N)[N](_classPrivateFieldLooseBase$1(this,Q)[Q](e),{key:i,uploadId:a,parts:o,signal:s},s).abortOn(s)}catch(t){(t==null?void 0:t.cause)!==p&&(t==null?void 0:t.name)!=="AbortError"&&this.abortFileUpload(e);throw t}}restoreUploadFile(e,t){_classPrivateFieldLooseBase$1(this,I)[I].set(e.data,t)}async resumeUploadFile(e,t,s){throwIfAborted(s);if(t.length===1&&t[0]!=null&&!t[0].shouldUseMultipart)return _classPrivateFieldLooseBase$1(this,G)[G](e,t[0],s);const{uploadId:a,key:i}=await this.getUploadId(e,s);throwIfAborted(s);const o=await _classPrivateFieldLooseBase$1(this,x)[x](_classPrivateFieldLooseBase$1(this,Q)[Q](e),{uploadId:a,key:i,signal:s},s).abortOn(s);throwIfAborted(s);const r=await Promise.all(t.map(((t,a)=>{const i=a+1;const r=o.find((e=>{let{PartNumber:t}=e;return t===i}));if(r==null)return this.uploadChunk(e,i,t,s);t==null||t.setAsUploaded==null||t.setAsUploaded();return{PartNumber:i,ETag:r.ETag}})));throwIfAborted(s);return _classPrivateFieldLooseBase$1(this,N)[N](_classPrivateFieldLooseBase$1(this,Q)[Q](e),{key:i,uploadId:a,parts:r,signal:s},s).abortOn(s)}async uploadChunk(e,t,s,a){throwIfAborted(a);const{uploadId:i,key:o}=await this.getUploadId(e,a);const r=_classPrivateFieldLooseBase$1(this,q)[q].values();const l=_classPrivateFieldLooseBase$1(this,q)[q].values();const shouldRetrySignature=()=>{const e=r.next();return e==null||e.done?null:e.value};for(;;){throwIfAborted(a);const r=s.getData();const{onProgress:n,onComplete:d}=s;let c;try{c=await _classPrivateFieldLooseBase$1(this,K)[K](_classPrivateFieldLooseBase$1(this,Q)[Q](e),{uploadId:i,key:o,partNumber:t,body:r,signal:a}).abortOn(a)}catch(e){const t=shouldRetrySignature();if(t==null||a.aborted)throw e;await new Promise((e=>setTimeout(e,t)));continue}throwIfAborted(a);try{return{PartNumber:t,...await _classPrivateFieldLooseBase$1(this,X)[X]({signature:c,body:r,size:r.size,onProgress:n,onComplete:d,signal:a}).abortOn(a)}}catch(e){if(!await _classPrivateFieldLooseBase$1(this,W)[W](e,l))throw e}}}}async function _shouldRetry2(e,t){var s;const a=_classPrivateFieldLooseBase$1(this,z)[z];const i=e==null||(s=e.source)==null?void 0:s.status;if(i==null)return false;if(i===403&&e.message==="Request has expired"){if(!a.isPaused){if(a.limit===1||_classPrivateFieldLooseBase$1(this,H)[H]==null){const e=t.next();if(e==null||e.done)return false;_classPrivateFieldLooseBase$1(this,H)[H]=e.value}a.rateLimit(0);await new Promise((e=>setTimeout(e,_classPrivateFieldLooseBase$1(this,H)[H])))}}else if(i===429){if(!a.isPaused){const e=t.next();if(e==null||e.done)return false;a.rateLimit(e.value)}}else{if(i>400&&i<500&&i!==409)return false;if(typeof navigator!=="undefined"&&navigator.onLine===false){if(!a.isPaused){a.pause();window.addEventListener("online",(()=>{a.resume()}),{once:true})}}else{const e=t.next();if(e==null||e.done)return false;await new Promise((t=>setTimeout(t,e.value)))}}return true}async function _nonMultipartUpload2(e,t,s){var a;const{method:i="POST",url:o,fields:r,headers:l}=await _classPrivateFieldLooseBase$1(this,T)[T](_classPrivateFieldLooseBase$1(this,Q)[Q](e),{signal:s}).abortOn(s);let n;const d=t.getData();if(i.toUpperCase()==="POST"){const e=new FormData;Object.entries(r).forEach((t=>{let[s,a]=t;return e.set(s,a)}));e.set("file",d);n=e}else n=d;const{onProgress:c,onComplete:u}=t;const p=await _classPrivateFieldLooseBase$1(this,X)[X]({signature:{url:o,headers:l,method:i},body:n,size:d.size,onProgress:c,onComplete:u,signal:s}).abortOn(s);const h=r==null?void 0:r.key;_classPrivateFieldLooseBase$1(this,D)[D](e,{key:h});return{...p,location:(a=p.location)!=null?a:removeMetadataFromURL(o),bucket:r==null?void 0:r.bucket,key:h}}function _classPrivateFieldLooseBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var V=0;function _classPrivateFieldLooseKey(e){return"__private_"+V+++"_"+e}const Y={version:"4.2.3"};function assertServerError(e){if(e!=null&&e.error){const t=new Error(e.message);Object.assign(t,e.error);throw t}return e}function getExpiry(e){const t=e.Expiration;if(t){const e=Math.floor((new Date(t)-Date.now())/1e3);if(e>9)return e}}function getAllowedMetadata(e){let{meta:t,allowedMetaFields:s,querify:a=false}=e;const i=s!=null?s:Object.keys(t);return t?Object.fromEntries(i.filter((e=>t[e]!=null)).map((e=>{const s=a?`metadata[${e}]`:e;const i=String(t[e]);return[s,i]}))):{}}const J={allowedMetaFields:true,limit:6,getTemporarySecurityCredentials:false,shouldUseMultipart:e=>(e.size||0)>104857600,retryDelays:[0,1e3,3e3,5e3]};var Z=_classPrivateFieldLooseKey("companionCommunicationQueue");var ee=_classPrivateFieldLooseKey("client");var te=_classPrivateFieldLooseKey("setClient");var se=_classPrivateFieldLooseKey("assertHost");var ae=_classPrivateFieldLooseKey("cachedTemporaryCredentials");var ie=_classPrivateFieldLooseKey("getTemporarySecurityCredentials");var oe=_classPrivateFieldLooseKey("setS3MultipartState");var re=_classPrivateFieldLooseKey("getFile");var le=_classPrivateFieldLooseKey("uploadLocalFile");var ne=_classPrivateFieldLooseKey("getCompanionClientArgs");var de=_classPrivateFieldLooseKey("upload");var ce=_classPrivateFieldLooseKey("setCompanionHeaders");var ue=_classPrivateFieldLooseKey("setResumableUploadsCapability");var pe=_classPrivateFieldLooseKey("resetResumableCapability");class AwsS3Multipart extends e{constructor(e,t){var s;super(e,{...J,uploadPartBytes:AwsS3Multipart.uploadPartBytes,createMultipartUpload:null,listParts:null,abortMultipartUpload:null,completeMultipartUpload:null,signPart:null,getUploadParameters:null,...t});Object.defineProperty(this,ne,{value:_getCompanionClientArgs2});Object.defineProperty(this,le,{value:_uploadLocalFile2});Object.defineProperty(this,ie,{value:_getTemporarySecurityCredentials2});Object.defineProperty(this,se,{value:_assertHost2});Object.defineProperty(this,te,{value:_setClient2});Object.defineProperty(this,Z,{writable:true,value:void 0});Object.defineProperty(this,ee,{writable:true,value:void 0});Object.defineProperty(this,ae,{writable:true,value:void 0});Object.defineProperty(this,oe,{writable:true,value:(e,t)=>{let{key:s,uploadId:a}=t;const i=this.uppy.getFile(e.id);i!=null&&this.uppy.setFileState(e.id,{s3Multipart:{...i.s3Multipart,key:s,uploadId:a}})}});Object.defineProperty(this,re,{writable:true,value:e=>this.uppy.getFile(e.id)||e});Object.defineProperty(this,de,{writable:true,value:async e=>{if(e.length===0)return;const t=this.uppy.getFilesByIds(e);const s=i(t);const a=o(s);this.uppy.emit("upload-start",a);const r=s.map((e=>{if(e.isRemote){const getQueue=()=>this.requests;_classPrivateFieldLooseBase(this,ue)[ue](false);const t=new AbortController;const removedHandler=s=>{s.id===e.id&&t.abort()};this.uppy.on("file-removed",removedHandler);const s=this.uppy.getRequestClientForFile(e).uploadRemoteFile(e,_classPrivateFieldLooseBase(this,ne)[ne](e),{signal:t.signal,getQueue:getQueue});this.requests.wrapSyncFunction((()=>{this.uppy.off("file-removed",removedHandler)}),{priority:-1})();return s}return _classPrivateFieldLooseBase(this,le)[le](e)}));const l=await Promise.allSettled(r);_classPrivateFieldLooseBase(this,ue)[ue](true);return l}});Object.defineProperty(this,ce,{writable:true,value:()=>{var e;(e=_classPrivateFieldLooseBase(this,ee)[ee])==null||e.setCompanionHeaders(this.opts.headers)}});Object.defineProperty(this,ue,{writable:true,value:e=>{const{capabilities:t}=this.uppy.getState();this.uppy.setState({capabilities:{...t,resumableUploads:e}})}});Object.defineProperty(this,pe,{writable:true,value:()=>{_classPrivateFieldLooseBase(this,ue)[ue](true)}});this.type="uploader";this.id=this.opts.id||"AwsS3Multipart";_classPrivateFieldLooseBase(this,te)[te](t);const r={createMultipartUpload:this.createMultipartUpload,listParts:this.listParts,abortMultipartUpload:this.abortMultipartUpload,completeMultipartUpload:this.completeMultipartUpload,signPart:t!=null&&t.getTemporarySecurityCredentials?this.createSignedURL:this.signPart,getUploadParameters:t!=null&&t.getTemporarySecurityCredentials?this.createSignedURL:this.getUploadParameters};for(const e of Object.keys(r))this.opts[e]==null&&(this.opts[e]=r[e].bind(this));
/**
     * Simultaneous upload limiting is shared across all uploads with this plugin.
     *
     * @type {RateLimitedQueue}
     */this.requests=(s=this.opts.rateLimitedQueue)!=null?s:new a(this.opts.limit);_classPrivateFieldLooseBase(this,Z)[Z]=new HTTPCommunicationQueue(this.requests,this.opts,_classPrivateFieldLooseBase(this,oe)[oe],_classPrivateFieldLooseBase(this,re)[re]);this.uploaders=Object.create(null);this.uploaderEvents=Object.create(null)}[Symbol.for("uppy test: getClient")](){return _classPrivateFieldLooseBase(this,ee)[ee]}setOptions(e){_classPrivateFieldLooseBase(this,Z)[Z].setOptions(e);super.setOptions(e);_classPrivateFieldLooseBase(this,te)[te](e)}resetUploaderReferences(e,t){if(this.uploaders[e]){this.uploaders[e].abort({really:(t==null?void 0:t.abort)||false});this.uploaders[e]=null}if(this.uploaderEvents[e]){this.uploaderEvents[e].remove();this.uploaderEvents[e]=null}}createMultipartUpload(e,t){_classPrivateFieldLooseBase(this,se)[se]("createMultipartUpload");throwIfAborted(t);const s=n(this.opts.allowedMetaFields,e.meta);const a=getAllowedMetadata({meta:e.meta,allowedMetaFields:s});return _classPrivateFieldLooseBase(this,ee)[ee].post("s3/multipart",{filename:e.name,type:e.type,metadata:a},{signal:t}).then(assertServerError)}listParts(e,t,s){var a;let{key:i,uploadId:o,signal:r}=t;(a=r)!=null?a:r=s;_classPrivateFieldLooseBase(this,se)[se]("listParts");throwIfAborted(r);const l=encodeURIComponent(i);return _classPrivateFieldLooseBase(this,ee)[ee].get(`s3/multipart/${encodeURIComponent(o)}?key=${l}`,{signal:r}).then(assertServerError)}completeMultipartUpload(e,t,s){var a;let{key:i,uploadId:o,parts:r,signal:l}=t;(a=l)!=null?a:l=s;_classPrivateFieldLooseBase(this,se)[se]("completeMultipartUpload");throwIfAborted(l);const n=encodeURIComponent(i);const d=encodeURIComponent(o);return _classPrivateFieldLooseBase(this,ee)[ee].post(`s3/multipart/${d}/complete?key=${n}`,{parts:r.map((e=>{let{ETag:t,PartNumber:s}=e;return{ETag:t,PartNumber:s}}))},{signal:l}).then(assertServerError)}async createSignedURL(e,t){const s=await _classPrivateFieldLooseBase(this,ie)[ie](t);const a=getExpiry(s.credentials)||604800;const{uploadId:i,key:o,partNumber:r}=t;return{method:"PUT",expires:a,fields:{},url:`${await createSignedURL({accountKey:s.credentials.AccessKeyId,accountSecret:s.credentials.SecretAccessKey,sessionToken:s.credentials.SessionToken,expires:a,bucketName:s.bucket,Region:s.region,Key:o!=null?o:`${crypto.randomUUID()}-${e.name}`,uploadId:i,partNumber:r})}`,headers:{"Content-Type":e.type}}}signPart(e,t){let{uploadId:s,key:a,partNumber:i,signal:o}=t;_classPrivateFieldLooseBase(this,se)[se]("signPart");throwIfAborted(o);if(s==null||a==null||i==null)throw new Error("Cannot sign without a key, an uploadId, and a partNumber");const r=encodeURIComponent(a);return _classPrivateFieldLooseBase(this,ee)[ee].get(`s3/multipart/${encodeURIComponent(s)}/${i}?key=${r}`,{signal:o}).then(assertServerError)}abortMultipartUpload(e,t){let{key:s,uploadId:a,signal:i}=t;_classPrivateFieldLooseBase(this,se)[se]("abortMultipartUpload");const o=encodeURIComponent(s);const r=encodeURIComponent(a);return _classPrivateFieldLooseBase(this,ee)[ee].delete(`s3/multipart/${r}?key=${o}`,void 0,{signal:i}).then(assertServerError)}getUploadParameters(e,t){_classPrivateFieldLooseBase(this,se)[se]("getUploadParameters");const{meta:s}=e;const{type:a,name:i}=s;const o=n(this.opts.allowedMetaFields,e.meta);const r=getAllowedMetadata({meta:s,allowedMetaFields:o,querify:true});const l=new URLSearchParams({filename:i,type:a,...r});return _classPrivateFieldLooseBase(this,ee)[ee].get(`s3/params?${l}`,t)}static async uploadPartBytes(e){let{signature:{url:t,expires:s,headers:a,method:i="PUT"},body:o,size:r=o.size,onProgress:n,onComplete:d,signal:c}=e;throwIfAborted(c);if(t==null)throw new Error("Cannot upload to an undefined URL");return new Promise(((e,u)=>{const p=new XMLHttpRequest;p.open(i,t,true);a&&Object.keys(a).forEach((e=>{p.setRequestHeader(e,a[e])}));p.responseType="text";typeof s==="number"&&(p.timeout=s*1e3);function onabort(){p.abort()}function cleanup(){c==null||c.removeEventListener("abort",onabort)}c==null||c.addEventListener("abort",onabort);p.upload.addEventListener("progress",(e=>{n(e)}));p.addEventListener("abort",(()=>{cleanup();u(l())}));p.addEventListener("timeout",(()=>{cleanup();const e=new Error("Request has expired");e.source={status:403};u(e)}));p.addEventListener("load",(()=>{cleanup();if(p.status===403&&p.responseText.includes("<Message>Request has expired</Message>")){const e=new Error("Request has expired");e.source=p;u(e);return}if(p.status<200||p.status>=300){const e=new Error("Non 2xx");e.source=p;u(e);return}n==null||n({loaded:r,lengthComputable:true});const t=p.getAllResponseHeaders().trim().split(/[\r\n]+/);const s={__proto__:null};for(const e of t){const t=e.split(": ");const a=t.shift();const i=t.join(": ");s[a]=i}const{etag:a,location:o}=s;i.toUpperCase()==="POST"&&o==null&&console.error("@uppy/aws-s3: Could not read the Location header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3/#setting-up-your-s3-bucket");if(a!=null){d==null||d(a);e({...s,ETag:a})}else console.error("@uppy/aws-s3: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3/#setting-up-your-s3-bucket")}));p.addEventListener("error",(e=>{cleanup();const t=new Error("Unknown error");t.source=e.target;u(t)}));p.send(o)}))}install(){_classPrivateFieldLooseBase(this,ue)[ue](true);this.uppy.addPreProcessor(_classPrivateFieldLooseBase(this,ce)[ce]);this.uppy.addUploader(_classPrivateFieldLooseBase(this,de)[de]);this.uppy.on("cancel-all",_classPrivateFieldLooseBase(this,pe)[pe])}uninstall(){this.uppy.removePreProcessor(_classPrivateFieldLooseBase(this,ce)[ce]);this.uppy.removeUploader(_classPrivateFieldLooseBase(this,de)[de]);this.uppy.off("cancel-all",_classPrivateFieldLooseBase(this,pe)[pe])}}function _setClient2(e){if(e!=null&&("endpoint"in e||"companionUrl"in e||"headers"in e||"companionHeaders"in e||"cookiesRule"in e||"companionCookiesRule"in e)){"companionUrl"in e&&!("endpoint"in e)&&this.uppy.log("`companionUrl` option has been removed in @uppy/aws-s3, use `endpoint` instead.","warning");"companionHeaders"in e&&!("headers"in e)&&this.uppy.log("`companionHeaders` option has been removed in @uppy/aws-s3, use `headers` instead.","warning");"companionCookiesRule"in e&&!("cookiesRule"in e)&&this.uppy.log("`companionCookiesRule` option has been removed in @uppy/aws-s3, use `cookiesRule` instead.","warning");if("endpoint"in e)_classPrivateFieldLooseBase(this,ee)[ee]=new t(this.uppy,{pluginId:this.id,provider:"AWS",companionUrl:this.opts.endpoint,companionHeaders:this.opts.headers,companionCookiesRule:this.opts.cookiesRule});else{"headers"in e&&_classPrivateFieldLooseBase(this,ce)[ce]();"cookiesRule"in e&&(_classPrivateFieldLooseBase(this,ee)[ee].opts.companionCookiesRule=e.cookiesRule)}}}function _assertHost2(e){if(!_classPrivateFieldLooseBase(this,ee)[ee])throw new Error(`Expected a \`endpoint\` option containing a URL, or if you are not using Companion, a custom \`${e}\` implementation.`)}async function _getTemporarySecurityCredentials2(e){throwIfAborted(e==null?void 0:e.signal);if(_classPrivateFieldLooseBase(this,ae)[ae]==null){const{getTemporarySecurityCredentials:t}=this.opts;if(t===true){_classPrivateFieldLooseBase(this,se)[se]("getTemporarySecurityCredentials");_classPrivateFieldLooseBase(this,ae)[ae]=_classPrivateFieldLooseBase(this,ee)[ee].get("s3/sts",e).then(assertServerError)}else _classPrivateFieldLooseBase(this,ae)[ae]=t(e);_classPrivateFieldLooseBase(this,ae)[ae]=await _classPrivateFieldLooseBase(this,ae)[ae];setTimeout((()=>{_classPrivateFieldLooseBase(this,ae)[ae]=null}),(getExpiry(_classPrivateFieldLooseBase(this,ae)[ae].credentials)||0)*500)}return _classPrivateFieldLooseBase(this,ae)[ae]}function _uploadLocalFile2(e){var t=this;return new Promise(((a,i)=>{const onProgress=(t,s)=>{var a;const i=this.uppy.getFile(e.id);this.uppy.emit("upload-progress",i,{uploadStarted:(a=i.progress.uploadStarted)!=null?a:0,bytesUploaded:t,bytesTotal:s})};const onError=t=>{this.uppy.log(t);this.uppy.emit("upload-error",e,t);this.resetUploaderReferences(e.id);i(t)};const onSuccess=t=>{const s={body:{...t},status:200,uploadURL:t.location};this.resetUploaderReferences(e.id);this.uppy.emit("upload-success",_classPrivateFieldLooseBase(this,re)[re](e),s);t.location&&this.uppy.log(`Download ${e.name} from ${t.location}`);a()};const o=new MultipartUploader(e.data,{companionComm:_classPrivateFieldLooseBase(this,Z)[Z],log:function(){return t.uppy.log(...arguments)},getChunkSize:this.opts.getChunkSize?this.opts.getChunkSize.bind(this):void 0,onProgress:onProgress,onError:onError,onSuccess:onSuccess,onPartComplete:t=>{this.uppy.emit("s3-multipart:part-uploaded",_classPrivateFieldLooseBase(this,re)[re](e),t)},file:e,shouldUseMultipart:this.opts.shouldUseMultipart,...e.s3Multipart});this.uploaders[e.id]=o;const r=new s(this.uppy);this.uploaderEvents[e.id]=r;r.onFileRemove(e.id,(t=>{o.abort();this.resetUploaderReferences(e.id,{abort:true});a(`upload ${t} was removed`)}));r.onCancelAll(e.id,(()=>{o.abort();this.resetUploaderReferences(e.id,{abort:true});a(`upload ${e.id} was canceled`)}));r.onFilePause(e.id,(e=>{e?o.pause():o.start()}));r.onPauseAll(e.id,(()=>{o.pause()}));r.onResumeAll(e.id,(()=>{o.start()}));o.start()}))}function _getCompanionClientArgs2(e){var t;return{...(t=e.remote)==null?void 0:t.body,protocol:"s3-multipart",size:e.data.size,metadata:e.meta}}AwsS3Multipart.VERSION=Y.version;export{AwsS3Multipart as default};

