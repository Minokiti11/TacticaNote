// @uppy/thumbnail-generator@4.1.1 downloaded from https://ga.jspm.io/npm:@uppy/thumbnail-generator@4.1.1/lib/index.js

import{UIPlugin as e}from"@uppy/core";import t from"@uppy/utils/lib/dataURItoBlob";import i from"@uppy/utils/lib/isObjectURL";import s from"@uppy/utils/lib/isPreviewSupported";import{rotation as o}from"exifr/dist/mini.esm.mjs";var r={strings:{generatingThumbnails:"Generating thumbnails..."}};const n={version:"4.1.1"};function canvasToBlob(e,i,s){try{e.getContext("2d").getImageData(0,0,1,1)}catch(e){if(e.code===18)return Promise.reject(new Error("cannot read image, probably an svg with external resources"))}return e.toBlob?new Promise((t=>{e.toBlob(t,i,s)})).then((e=>{if(e===null)throw new Error("cannot read image, probably an svg with external resources");return e})):Promise.resolve().then((()=>t(e.toDataURL(i,s),{}))).then((e=>{if(e===null)throw new Error("could not extract blob, probably an old browser");return e}))}function rotateImage(e,t){let i=e.width;let s=e.height;if(t.deg===90||t.deg===270){i=e.height;s=e.width}const o=document.createElement("canvas");o.width=i;o.height=s;const r=o.getContext("2d");r.translate(i/2,s/2);if(t.canvas){r.rotate(t.rad);r.scale(t.scaleX,t.scaleY)}r.drawImage(e,-e.width/2,-e.height/2,e.width,e.height);return o}function protect(e){const t=e.width/e.height;const i=5e6;const s=4096;let o=Math.floor(Math.sqrt(i*t));let r=Math.floor(i/Math.sqrt(i*t));if(o>s){o=s;r=Math.round(o/t)}if(r>s){r=s;o=Math.round(t*r)}if(e.width>o){const t=document.createElement("canvas");t.width=o;t.height=r;t.getContext("2d").drawImage(e,0,0,o,r);return t}return e}const h={thumbnailWidth:null,thumbnailHeight:null,thumbnailType:"image/jpeg",waitForThumbnailsBeforeUpload:false,lazy:false};class ThumbnailGenerator extends e{constructor(e,t){super(e,{...h,...t});this.onFileAdded=e=>{!e.preview&&e.data&&s(e.type)&&!e.isRemote&&this.addToQueue(e.id)};this.onCancelRequest=e=>{const t=this.queue.indexOf(e.id);t!==-1&&this.queue.splice(t,1)};this.onFileRemoved=e=>{const t=this.queue.indexOf(e.id);t!==-1&&this.queue.splice(t,1);e.preview&&i(e.preview)&&URL.revokeObjectURL(e.preview)};this.onRestored=()=>{const e=this.uppy.getFiles().filter((e=>e.isRestored));e.forEach((e=>{e.preview&&!i(e.preview)||this.addToQueue(e.id)}))};this.onAllFilesRemoved=()=>{this.queue=[]};this.waitUntilAllProcessed=e=>{e.forEach((e=>{const t=this.uppy.getFile(e);this.uppy.emit("preprocess-progress",t,{mode:"indeterminate",message:this.i18n("generatingThumbnails")})}));const emitPreprocessCompleteForAll=()=>{e.forEach((e=>{const t=this.uppy.getFile(e);this.uppy.emit("preprocess-complete",t)}))};return new Promise((e=>{if(this.queueProcessing)this.uppy.once("thumbnail:all-generated",(()=>{emitPreprocessCompleteForAll();e()}));else{emitPreprocessCompleteForAll();e()}}))};this.type="modifier";this.id=this.opts.id||"ThumbnailGenerator";this.title="Thumbnail Generator";this.queue=[];this.queueProcessing=false;this.defaultThumbnailDimension=200;this.thumbnailType=this.opts.thumbnailType;this.defaultLocale=r;this.i18nInit();if(this.opts.lazy&&this.opts.waitForThumbnailsBeforeUpload)throw new Error("ThumbnailGenerator: The `lazy` and `waitForThumbnailsBeforeUpload` options are mutually exclusive. Please ensure at most one of them is set to `true`.")}createThumbnail(e,t,i){const s=URL.createObjectURL(e.data);const r=new Promise(((e,t)=>{const i=new Image;i.src=s;i.addEventListener("load",(()=>{URL.revokeObjectURL(s);e(i)}));i.addEventListener("error",(e=>{URL.revokeObjectURL(s);t(e.error||new Error("Could not create thumbnail"))}))}));const n=o(e.data).catch((()=>1));return Promise.all([r,n]).then((e=>{let[s,o]=e;const r=this.getProportionalDimensions(s,t,i,o.deg);const n=rotateImage(s,o);const h=this.resizeImage(n,r.width,r.height);return canvasToBlob(h,this.thumbnailType,80)})).then((e=>URL.createObjectURL(e)))}getProportionalDimensions(e,t,i,s){let o=e.width/e.height;s!==90&&s!==270||(o=e.height/e.width);return t!=null?{width:t,height:Math.round(t/o)}:i!=null?{width:Math.round(i*o),height:i}:{width:this.defaultThumbnailDimension,height:Math.round(this.defaultThumbnailDimension/o)}}resizeImage(e,t,i){let s=protect(e);let o=Math.ceil(Math.log2(s.width/t));o<1&&(o=1);let r=t*2**(o-1);let n=i*2**(o-1);const h=2;while(o--){const e=document.createElement("canvas");e.width=r;e.height=n;e.getContext("2d").drawImage(s,0,0,r,n);s=e;r=Math.round(r/h);n=Math.round(n/h)}return s}setPreviewURL(e,t){this.uppy.setFileState(e,{preview:t})}addToQueue(e){this.queue.push(e);this.queueProcessing===false&&this.processQueue()}processQueue(){this.queueProcessing=true;if(this.queue.length>0){const e=this.uppy.getFile(this.queue.shift());if(!e){this.uppy.log("[ThumbnailGenerator] file was removed before a thumbnail could be generated, but not removed from the queue. This is probably a bug","error");return Promise.resolve()}return this.requestThumbnail(e).catch((()=>{})).then((()=>this.processQueue()))}this.queueProcessing=false;this.uppy.log("[ThumbnailGenerator] Emptied thumbnail queue");this.uppy.emit("thumbnail:all-generated");return Promise.resolve()}requestThumbnail(e){return s(e.type)&&!e.isRemote?this.createThumbnail(e,this.opts.thumbnailWidth,this.opts.thumbnailHeight).then((t=>{this.setPreviewURL(e.id,t);this.uppy.log(`[ThumbnailGenerator] Generated thumbnail for ${e.id}`);this.uppy.emit("thumbnail:generated",this.uppy.getFile(e.id),t)})).catch((t=>{this.uppy.log(`[ThumbnailGenerator] Failed thumbnail for ${e.id}:`,"warning");this.uppy.log(t,"warning");this.uppy.emit("thumbnail:error",this.uppy.getFile(e.id),t)})):Promise.resolve()}install(){this.uppy.on("file-removed",this.onFileRemoved);this.uppy.on("cancel-all",this.onAllFilesRemoved);if(this.opts.lazy){this.uppy.on("thumbnail:request",this.onFileAdded);this.uppy.on("thumbnail:cancel",this.onCancelRequest)}else{this.uppy.on("thumbnail:request",this.onFileAdded);this.uppy.on("file-added",this.onFileAdded);this.uppy.on("restored",this.onRestored)}this.opts.waitForThumbnailsBeforeUpload&&this.uppy.addPreProcessor(this.waitUntilAllProcessed)}uninstall(){this.uppy.off("file-removed",this.onFileRemoved);this.uppy.off("cancel-all",this.onAllFilesRemoved);if(this.opts.lazy){this.uppy.off("thumbnail:request",this.onFileAdded);this.uppy.off("thumbnail:cancel",this.onCancelRequest)}else{this.uppy.off("thumbnail:request",this.onFileAdded);this.uppy.off("file-added",this.onFileAdded);this.uppy.off("restored",this.onRestored)}this.opts.waitForThumbnailsBeforeUpload&&this.uppy.removePreProcessor(this.waitUntilAllProcessed)}}ThumbnailGenerator.VERSION=n.version;export{ThumbnailGenerator as default};

