// p-timeout@6.1.4 downloaded from https://ga.jspm.io/npm:p-timeout@6.1.4/index.js

class TimeoutError extends Error{constructor(e){super(e);this.name="TimeoutError"}}class AbortError extends Error{constructor(e){super();this.name="AbortError";this.message=e}}const getDOMException=e=>globalThis.DOMException===void 0?new AbortError(e):new DOMException(e);const getAbortedReason=e=>{const r=e.reason===void 0?getDOMException("This operation was aborted."):e.reason;return r instanceof Error?r:getDOMException(r)};function pTimeout(e,r){const{milliseconds:o,fallback:t,message:s,customTimers:i={setTimeout:setTimeout,clearTimeout:clearTimeout}}=r;let n;let a;const c=new Promise(((c,l)=>{if(typeof o!=="number"||Math.sign(o)!==1)throw new TypeError(`Expected \`milliseconds\` to be a positive number, got \`${o}\``);if(r.signal){const{signal:e}=r;e.aborted&&l(getAbortedReason(e));a=()=>{l(getAbortedReason(e))};e.addEventListener("abort",a,{once:true})}if(o===Number.POSITIVE_INFINITY){e.then(c,l);return}const m=new TimeoutError;n=i.setTimeout.call(void 0,(()=>{if(t)try{c(t())}catch(e){l(e)}else{typeof e.cancel==="function"&&e.cancel();if(s===false)c();else if(s instanceof Error)l(s);else{m.message=s??`Promise timed out after ${o} milliseconds`;l(m)}}}),o);(async()=>{try{c(await e)}catch(e){l(e)}})()}));const l=c.finally((()=>{l.clear();a&&r.signal&&r.signal.removeEventListener("abort",a)}));l.clear=()=>{i.clearTimeout.call(void 0,n);n=void 0};return l}export{AbortError,TimeoutError,pTimeout as default};

